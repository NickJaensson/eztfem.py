# run with: python -m unittest test_meshes.py
import numpy as np
import unittest
import sys
sys.path.append('..')
from eztfem.src.distribute_elements import distribute_elements
from eztfem.src.quadrilateral2d import quadrilateral2d
from eztfem.src.mesh_class import Mesh, Geometry
from eztfem.src.line_1d import line1d
from eztfem.addons.meshes.l_shape2d import l_shape2d
from eztfem.addons.meshes.two_blocks2d import two_blocks2d
from eztfem.src.mesh_merge import mesh_merge
class TestPytfem(unittest.TestCase):
  def test01_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([4,7],'quad4',origin=np.array([1,1]),length=np.array([7,5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 40
    mesh_ez.elshape = 5
    mesh_ez.nelem = 28
    mesh_ez.elnumnod = 4
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           2,           3,           4,           6,           7,           8,           9,          11,          12,          13,          14,          16,          17,          18,          19,          21,          22,          23,          24,          26,          27,          28,          29,          31,          32,          33,          34,],
    [           2,           3,           4,           5,           7,           8,           9,          10,          12,          13,          14,          15,          17,          18,          19,          20,          22,          23,          24,          25,          27,          28,          29,          30,          32,          33,          34,          35,],
    [           7,           8,           9,          10,          12,          13,          14,          15,          17,          18,          19,          20,          22,          23,          24,          25,          27,          28,          29,          30,          32,          33,          34,          35,          37,          38,          39,          40,],
    [           6,           7,           8,           9,          11,          12,          13,          14,          16,          17,          18,          19,          21,          22,          23,          24,          26,          27,          28,          29,          31,          32,          33,          34,          36,          37,          38,          39,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   2.7500000000000000e+00,   1.0000000000000000e+00,],
    [   4.5000000000000000e+00,   1.0000000000000000e+00,],
    [   6.2500000000000000e+00,   1.0000000000000000e+00,],
    [   8.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.0000000000000000e+00,   1.7142857142857142e+00,],
    [   2.7500000000000000e+00,   1.7142857142857142e+00,],
    [   4.5000000000000000e+00,   1.7142857142857142e+00,],
    [   6.2500000000000000e+00,   1.7142857142857142e+00,],
    [   8.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.0000000000000000e+00,   2.4285714285714284e+00,],
    [   2.7500000000000000e+00,   2.4285714285714284e+00,],
    [   4.5000000000000000e+00,   2.4285714285714284e+00,],
    [   6.2500000000000000e+00,   2.4285714285714284e+00,],
    [   8.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.0000000000000000e+00,   3.1428571428571428e+00,],
    [   2.7500000000000000e+00,   3.1428571428571428e+00,],
    [   4.5000000000000000e+00,   3.1428571428571428e+00,],
    [   6.2500000000000000e+00,   3.1428571428571428e+00,],
    [   8.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.0000000000000000e+00,   3.8571428571428568e+00,],
    [   2.7500000000000000e+00,   3.8571428571428568e+00,],
    [   4.5000000000000000e+00,   3.8571428571428568e+00,],
    [   6.2500000000000000e+00,   3.8571428571428568e+00,],
    [   8.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.0000000000000000e+00,   4.5714285714285712e+00,],
    [   2.7500000000000000e+00,   4.5714285714285712e+00,],
    [   4.5000000000000000e+00,   4.5714285714285712e+00,],
    [   6.2500000000000000e+00,   4.5714285714285712e+00,],
    [   8.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.0000000000000000e+00,   5.2857142857142856e+00,],
    [   2.7500000000000000e+00,   5.2857142857142856e+00,],
    [   4.5000000000000000e+00,   5.2857142857142856e+00,],
    [   6.2500000000000000e+00,   5.2857142857142856e+00,],
    [   8.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.0000000000000000e+00,   6.0000000000000000e+00,],
    [   2.7500000000000000e+00,   6.0000000000000000e+00,],
    [   4.5000000000000000e+00,   6.0000000000000000e+00,],
    [   6.2500000000000000e+00,   6.0000000000000000e+00,],
    [   8.0000000000000000e+00,   6.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               5,
              40,
              36,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 5
    mesh_ez.curves[0].nelem = 4
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 8
    mesh_ez.curves[1].nelem = 7
    mesh_ez.curves[1].nodes = np.array([
               5,
              10,
              15,
              20,
              25,
              30,
              35,
              40,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           5,],
    [           2,          10,],
    [           3,          15,],
    [           4,          20,],
    [           5,          25,],
    [           6,          30,],
    [           7,          35,],
    ],
    [
    [           2,          10,],
    [           3,          15,],
    [           4,          20,],
    [           5,          25,],
    [           6,          30,],
    [           7,          35,],
    [           8,          40,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 5
    mesh_ez.curves[2].nelem = 4
    mesh_ez.curves[2].nodes = np.array([
              40,
              39,
              38,
              37,
              36,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          40,],
    [           2,          39,],
    [           3,          38,],
    [           4,          37,],
    ],
    [
    [           2,          39,],
    [           3,          38,],
    [           4,          37,],
    [           5,          36,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 8
    mesh_ez.curves[3].nelem = 7
    mesh_ez.curves[3].nodes = np.array([
              36,
              31,
              26,
              21,
              16,
              11,
               6,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,          36,],
    [           2,          31,],
    [           3,          26,],
    [           4,          21,],
    [           5,          16,],
    [           6,          11,],
    [           7,           6,],
    ],
    [
    [           2,          31,],
    [           3,          26,],
    [           4,          21,],
    [           5,          16,],
    [           6,          11,],
    [           7,           6,],
    [           8,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test02_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([7,5],'quad4',vertices=np.array([[1,1],[2,2],[2,4],[1,4]]),ratio=np.array([1,2,3,4]),factor=np.array([1.2,1.3,1.4,1.5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 48
    mesh_ez.elshape = 5
    mesh_ez.nelem = 35
    mesh_ez.elnumnod = 4
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           2,           3,           4,           5,           6,           7,           9,          10,          11,          12,          13,          14,          15,          17,          18,          19,          20,          21,          22,          23,          25,          26,          27,          28,          29,          30,          31,          33,          34,          35,          36,          37,          38,          39,],
    [           2,           3,           4,           5,           6,           7,           8,          10,          11,          12,          13,          14,          15,          16,          18,          19,          20,          21,          22,          23,          24,          26,          27,          28,          29,          30,          31,          32,          34,          35,          36,          37,          38,          39,          40,],
    [          10,          11,          12,          13,          14,          15,          16,          18,          19,          20,          21,          22,          23,          24,          26,          27,          28,          29,          30,          31,          32,          34,          35,          36,          37,          38,          39,          40,          42,          43,          44,          45,          46,          47,          48,],
    [           9,          10,          11,          12,          13,          14,          15,          17,          18,          19,          20,          21,          22,          23,          25,          26,          27,          28,          29,          30,          31,          33,          34,          35,          36,          37,          38,          39,          41,          42,          43,          44,          45,          46,          47,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.1301696150208107e+00,   1.1301696150208107e+00,],
    [   1.2643553949435233e+00,   1.2643553949435233e+00,],
    [   1.4026812517925893e+00,   1.4026812517925893e+00,],
    [   1.5452749206899121e+00,   1.5452749206899121e+00,],
    [   1.6922680778100991e+00,   1.6922680778100991e+00,],
    [   1.8437964619750271e+00,   1.8437964619750271e+00,],
    [   2.0000000000000000e+00,   2.0000000000000000e+00,],
    [   1.0000000000000000e+00,   1.2274881516587675e+00,],
    [   1.1293511624655703e+00,   1.3599349301916182e+00,],
    [   1.2628707034896531e+00,   1.4954300998801142e+00,],
    [   1.4007443657988636e+00,   1.6340434612132482e+00,],
    [   1.5431714590941539e+00,   1.7758472923440236e+00,],
    [   1.6903662358282783e+00,   1.9209164299964210e+00,],
    [   1.8425594325578654e+00,   2.0693283296177079e+00,],
    [   2.0000000000000000e+00,   2.2211630967256801e+00,],
    [   1.0000000000000000e+00,   1.5687203791469193e+00,],
    [   1.1281534233035999e+00,   1.6964148983086509e+00,],
    [   1.2607476593170457e+00,   1.8262951975738617e+00,],
    [   1.3980340828344757e+00,   1.9583720732015595e+00,],
    [   1.5402872289765410e+00,   2.0926518320838925e+00,],
    [   1.6878075304515345e+00,   2.2291350173481472e+00,],
    [   1.8409244396533642e+00,   2.3678148229296681e+00,],
    [   2.0000000000000000e+00,   2.5086751224690644e+00,],
    [   1.0000000000000000e+00,   2.0805687203791470e+00,],
    [   1.1263951732577102e+00,   2.1908688507683465e+00,],
    [   1.2576964803273696e+00,   2.3027086235313163e+00,],
    [   1.3942192343540083e+00,   2.4160331015230092e+00,],
    [   1.5363097186294428e+00,   2.5307713566106256e+00,],
    [   1.6843490393612699e+00,   2.6468329818184886e+00,],
    [   1.8387575569772423e+00,   2.7641038247594487e+00,],
    [   2.0000000000000000e+00,   2.8824407559354643e+00,],
    [   1.0000000000000000e+00,   2.8483412322274879e+00,],
    [   1.1238059897105730e+00,   2.9201021073481748e+00,],
    [   1.2532880830321802e+00,   2.9929210590175077e+00,],
    [   1.3888148644852496e+00,   3.0666952358449073e+00,],
    [   1.5307884349954062e+00,   3.1412975467433544e+00,],
    [   1.6796483331049354e+00,   3.2165720853553825e+00,],
    [   1.8358760165797086e+00,   3.2923286389330619e+00,],
    [   2.0000000000000000e+00,   3.3683360794417840e+00,],
    [   1.0000000000000000e+00,   4.0000000000000000e+00,],
    [   1.1199803033470188e+00,   4.0000000000000000e+00,],
    [   1.2468811817414724e+00,   4.0000000000000000e+00,],
    [   1.3811018203633538e+00,   4.0000000000000000e+00,],
    [   1.5230644297636453e+00,   4.0000000000000000e+00,],
    [   1.6732155739890473e+00,   4.0000000000000000e+00,],
    [   1.8320275753141737e+00,   4.0000000000000000e+00,],
    [   2.0000000000000000e+00,   4.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               8,
              48,
              41,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 8
    mesh_ez.curves[0].nelem = 7
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    [           6,           6,],
    [           7,           7,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    [           6,           6,],
    [           7,           7,],
    [           8,           8,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 6
    mesh_ez.curves[1].nelem = 5
    mesh_ez.curves[1].nodes = np.array([
               8,
              16,
              24,
              32,
              40,
              48,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           8,],
    [           2,          16,],
    [           3,          24,],
    [           4,          32,],
    [           5,          40,],
    ],
    [
    [           2,          16,],
    [           3,          24,],
    [           4,          32,],
    [           5,          40,],
    [           6,          48,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 8
    mesh_ez.curves[2].nelem = 7
    mesh_ez.curves[2].nodes = np.array([
              48,
              47,
              46,
              45,
              44,
              43,
              42,
              41,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          48,],
    [           2,          47,],
    [           3,          46,],
    [           4,          45,],
    [           5,          44,],
    [           6,          43,],
    [           7,          42,],
    ],
    [
    [           2,          47,],
    [           3,          46,],
    [           4,          45,],
    [           5,          44,],
    [           6,          43,],
    [           7,          42,],
    [           8,          41,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 6
    mesh_ez.curves[3].nelem = 5
    mesh_ez.curves[3].nodes = np.array([
              41,
              33,
              25,
              17,
               9,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,          41,],
    [           2,          33,],
    [           3,          25,],
    [           4,          17,],
    [           5,           9,],
    ],
    [
    [           2,          33,],
    [           3,          25,],
    [           4,          17,],
    [           5,           9,],
    [           6,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test03_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([4,7],'quad9',origin=np.array([1,1]),length=np.array([7,5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 135
    mesh_ez.elshape = 6
    mesh_ez.nelem = 28
    mesh_ez.elnumnod = 9
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           3,           5,           7,          19,          21,          23,          25,          37,          39,          41,          43,          55,          57,          59,          61,          73,          75,          77,          79,          91,          93,          95,          97,         109,         111,         113,         115,],
    [           2,           4,           6,           8,          20,          22,          24,          26,          38,          40,          42,          44,          56,          58,          60,          62,          74,          76,          78,          80,          92,          94,          96,          98,         110,         112,         114,         116,],
    [           3,           5,           7,           9,          21,          23,          25,          27,          39,          41,          43,          45,          57,          59,          61,          63,          75,          77,          79,          81,          93,          95,          97,          99,         111,         113,         115,         117,],
    [          12,          14,          16,          18,          30,          32,          34,          36,          48,          50,          52,          54,          66,          68,          70,          72,          84,          86,          88,          90,         102,         104,         106,         108,         120,         122,         124,         126,],
    [          21,          23,          25,          27,          39,          41,          43,          45,          57,          59,          61,          63,          75,          77,          79,          81,          93,          95,          97,          99,         111,         113,         115,         117,         129,         131,         133,         135,],
    [          20,          22,          24,          26,          38,          40,          42,          44,          56,          58,          60,          62,          74,          76,          78,          80,          92,          94,          96,          98,         110,         112,         114,         116,         128,         130,         132,         134,],
    [          19,          21,          23,          25,          37,          39,          41,          43,          55,          57,          59,          61,          73,          75,          77,          79,          91,          93,          95,          97,         109,         111,         113,         115,         127,         129,         131,         133,],
    [          10,          12,          14,          16,          28,          30,          32,          34,          46,          48,          50,          52,          64,          66,          68,          70,          82,          84,          86,          88,         100,         102,         104,         106,         118,         120,         122,         124,],
    [          11,          13,          15,          17,          29,          31,          33,          35,          47,          49,          51,          53,          65,          67,          69,          71,          83,          85,          87,          89,         101,         103,         105,         107,         119,         121,         123,         125,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.8750000000000000e+00,   1.0000000000000000e+00,],
    [   2.7500000000000000e+00,   1.0000000000000000e+00,],
    [   3.6250000000000000e+00,   1.0000000000000000e+00,],
    [   4.5000000000000000e+00,   1.0000000000000000e+00,],
    [   5.3750000000000000e+00,   1.0000000000000000e+00,],
    [   6.2500000000000000e+00,   1.0000000000000000e+00,],
    [   7.1250000000000000e+00,   1.0000000000000000e+00,],
    [   8.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.0000000000000000e+00,   1.3571428571428572e+00,],
    [   1.8750000000000000e+00,   1.3571428571428572e+00,],
    [   2.7500000000000000e+00,   1.3571428571428572e+00,],
    [   3.6250000000000000e+00,   1.3571428571428572e+00,],
    [   4.5000000000000000e+00,   1.3571428571428572e+00,],
    [   5.3750000000000000e+00,   1.3571428571428572e+00,],
    [   6.2500000000000000e+00,   1.3571428571428572e+00,],
    [   7.1250000000000000e+00,   1.3571428571428572e+00,],
    [   8.0000000000000000e+00,   1.3571428571428572e+00,],
    [   1.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.8750000000000000e+00,   1.7142857142857142e+00,],
    [   2.7500000000000000e+00,   1.7142857142857142e+00,],
    [   3.6250000000000000e+00,   1.7142857142857142e+00,],
    [   4.5000000000000000e+00,   1.7142857142857142e+00,],
    [   5.3750000000000000e+00,   1.7142857142857142e+00,],
    [   6.2500000000000000e+00,   1.7142857142857142e+00,],
    [   7.1250000000000000e+00,   1.7142857142857142e+00,],
    [   8.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.0000000000000000e+00,   2.0714285714285712e+00,],
    [   1.8750000000000000e+00,   2.0714285714285712e+00,],
    [   2.7500000000000000e+00,   2.0714285714285712e+00,],
    [   3.6250000000000000e+00,   2.0714285714285712e+00,],
    [   4.5000000000000000e+00,   2.0714285714285712e+00,],
    [   5.3750000000000000e+00,   2.0714285714285712e+00,],
    [   6.2500000000000000e+00,   2.0714285714285712e+00,],
    [   7.1250000000000000e+00,   2.0714285714285712e+00,],
    [   8.0000000000000000e+00,   2.0714285714285712e+00,],
    [   1.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.8750000000000000e+00,   2.4285714285714284e+00,],
    [   2.7500000000000000e+00,   2.4285714285714284e+00,],
    [   3.6250000000000000e+00,   2.4285714285714284e+00,],
    [   4.5000000000000000e+00,   2.4285714285714284e+00,],
    [   5.3750000000000000e+00,   2.4285714285714284e+00,],
    [   6.2500000000000000e+00,   2.4285714285714284e+00,],
    [   7.1250000000000000e+00,   2.4285714285714284e+00,],
    [   8.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.0000000000000000e+00,   2.7857142857142856e+00,],
    [   1.8750000000000000e+00,   2.7857142857142856e+00,],
    [   2.7500000000000000e+00,   2.7857142857142856e+00,],
    [   3.6250000000000000e+00,   2.7857142857142856e+00,],
    [   4.5000000000000000e+00,   2.7857142857142856e+00,],
    [   5.3750000000000000e+00,   2.7857142857142856e+00,],
    [   6.2500000000000000e+00,   2.7857142857142856e+00,],
    [   7.1250000000000000e+00,   2.7857142857142856e+00,],
    [   8.0000000000000000e+00,   2.7857142857142856e+00,],
    [   1.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.8750000000000000e+00,   3.1428571428571428e+00,],
    [   2.7500000000000000e+00,   3.1428571428571428e+00,],
    [   3.6250000000000000e+00,   3.1428571428571428e+00,],
    [   4.5000000000000000e+00,   3.1428571428571428e+00,],
    [   5.3750000000000000e+00,   3.1428571428571428e+00,],
    [   6.2500000000000000e+00,   3.1428571428571428e+00,],
    [   7.1250000000000000e+00,   3.1428571428571428e+00,],
    [   8.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.0000000000000000e+00,   3.5000000000000000e+00,],
    [   1.8750000000000000e+00,   3.5000000000000000e+00,],
    [   2.7500000000000000e+00,   3.5000000000000000e+00,],
    [   3.6250000000000000e+00,   3.5000000000000000e+00,],
    [   4.5000000000000000e+00,   3.5000000000000000e+00,],
    [   5.3750000000000000e+00,   3.5000000000000000e+00,],
    [   6.2500000000000000e+00,   3.5000000000000000e+00,],
    [   7.1250000000000000e+00,   3.5000000000000000e+00,],
    [   8.0000000000000000e+00,   3.5000000000000000e+00,],
    [   1.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.8750000000000000e+00,   3.8571428571428568e+00,],
    [   2.7500000000000000e+00,   3.8571428571428568e+00,],
    [   3.6250000000000000e+00,   3.8571428571428568e+00,],
    [   4.5000000000000000e+00,   3.8571428571428568e+00,],
    [   5.3750000000000000e+00,   3.8571428571428568e+00,],
    [   6.2500000000000000e+00,   3.8571428571428568e+00,],
    [   7.1250000000000000e+00,   3.8571428571428568e+00,],
    [   8.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.0000000000000000e+00,   4.2142857142857135e+00,],
    [   1.8750000000000000e+00,   4.2142857142857135e+00,],
    [   2.7500000000000000e+00,   4.2142857142857135e+00,],
    [   3.6250000000000000e+00,   4.2142857142857135e+00,],
    [   4.5000000000000000e+00,   4.2142857142857135e+00,],
    [   5.3750000000000000e+00,   4.2142857142857135e+00,],
    [   6.2500000000000000e+00,   4.2142857142857135e+00,],
    [   7.1250000000000000e+00,   4.2142857142857135e+00,],
    [   8.0000000000000000e+00,   4.2142857142857135e+00,],
    [   1.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.8750000000000000e+00,   4.5714285714285712e+00,],
    [   2.7500000000000000e+00,   4.5714285714285712e+00,],
    [   3.6250000000000000e+00,   4.5714285714285712e+00,],
    [   4.5000000000000000e+00,   4.5714285714285712e+00,],
    [   5.3750000000000000e+00,   4.5714285714285712e+00,],
    [   6.2500000000000000e+00,   4.5714285714285712e+00,],
    [   7.1250000000000000e+00,   4.5714285714285712e+00,],
    [   8.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.0000000000000000e+00,   4.9285714285714288e+00,],
    [   1.8750000000000000e+00,   4.9285714285714288e+00,],
    [   2.7500000000000000e+00,   4.9285714285714288e+00,],
    [   3.6250000000000000e+00,   4.9285714285714288e+00,],
    [   4.5000000000000000e+00,   4.9285714285714288e+00,],
    [   5.3750000000000000e+00,   4.9285714285714288e+00,],
    [   6.2500000000000000e+00,   4.9285714285714288e+00,],
    [   7.1250000000000000e+00,   4.9285714285714288e+00,],
    [   8.0000000000000000e+00,   4.9285714285714288e+00,],
    [   1.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.8750000000000000e+00,   5.2857142857142856e+00,],
    [   2.7500000000000000e+00,   5.2857142857142856e+00,],
    [   3.6250000000000000e+00,   5.2857142857142856e+00,],
    [   4.5000000000000000e+00,   5.2857142857142856e+00,],
    [   5.3750000000000000e+00,   5.2857142857142856e+00,],
    [   6.2500000000000000e+00,   5.2857142857142856e+00,],
    [   7.1250000000000000e+00,   5.2857142857142856e+00,],
    [   8.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.0000000000000000e+00,   5.6428571428571423e+00,],
    [   1.8750000000000000e+00,   5.6428571428571423e+00,],
    [   2.7500000000000000e+00,   5.6428571428571423e+00,],
    [   3.6250000000000000e+00,   5.6428571428571423e+00,],
    [   4.5000000000000000e+00,   5.6428571428571423e+00,],
    [   5.3750000000000000e+00,   5.6428571428571423e+00,],
    [   6.2500000000000000e+00,   5.6428571428571423e+00,],
    [   7.1250000000000000e+00,   5.6428571428571423e+00,],
    [   8.0000000000000000e+00,   5.6428571428571423e+00,],
    [   1.0000000000000000e+00,   6.0000000000000000e+00,],
    [   1.8750000000000000e+00,   6.0000000000000000e+00,],
    [   2.7500000000000000e+00,   6.0000000000000000e+00,],
    [   3.6250000000000000e+00,   6.0000000000000000e+00,],
    [   4.5000000000000000e+00,   6.0000000000000000e+00,],
    [   5.3750000000000000e+00,   6.0000000000000000e+00,],
    [   6.2500000000000000e+00,   6.0000000000000000e+00,],
    [   7.1250000000000000e+00,   6.0000000000000000e+00,],
    [   8.0000000000000000e+00,   6.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               9,
             135,
             127,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 2
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 3
    mesh_ez.curves[0].nnodes = 9
    mesh_ez.curves[0].nelem = 4
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
               9,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    ],
    [
    [           2,           2,],
    [           4,           4,],
    [           6,           6,],
    [           8,           8,],
    ],
    [
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    [           9,           9,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 2
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 3
    mesh_ez.curves[1].nnodes = 15
    mesh_ez.curves[1].nelem = 7
    mesh_ez.curves[1].nodes = np.array([
               9,
              18,
              27,
              36,
              45,
              54,
              63,
              72,
              81,
              90,
              99,
             108,
             117,
             126,
             135,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           9,],
    [           3,          27,],
    [           5,          45,],
    [           7,          63,],
    [           9,          81,],
    [          11,          99,],
    [          13,         117,],
    ],
    [
    [           2,          18,],
    [           4,          36,],
    [           6,          54,],
    [           8,          72,],
    [          10,          90,],
    [          12,         108,],
    [          14,         126,],
    ],
    [
    [           3,          27,],
    [           5,          45,],
    [           7,          63,],
    [           9,          81,],
    [          11,          99,],
    [          13,         117,],
    [          15,         135,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 2
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 3
    mesh_ez.curves[2].nnodes = 9
    mesh_ez.curves[2].nelem = 4
    mesh_ez.curves[2].nodes = np.array([
             135,
             134,
             133,
             132,
             131,
             130,
             129,
             128,
             127,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,         135,],
    [           3,         133,],
    [           5,         131,],
    [           7,         129,],
    ],
    [
    [           2,         134,],
    [           4,         132,],
    [           6,         130,],
    [           8,         128,],
    ],
    [
    [           3,         133,],
    [           5,         131,],
    [           7,         129,],
    [           9,         127,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 2
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 3
    mesh_ez.curves[3].nnodes = 15
    mesh_ez.curves[3].nelem = 7
    mesh_ez.curves[3].nodes = np.array([
             127,
             118,
             109,
             100,
              91,
              82,
              73,
              64,
              55,
              46,
              37,
              28,
              19,
              10,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,         127,],
    [           3,         109,],
    [           5,          91,],
    [           7,          73,],
    [           9,          55,],
    [          11,          37,],
    [          13,          19,],
    ],
    [
    [           2,         118,],
    [           4,         100,],
    [           6,          82,],
    [           8,          64,],
    [          10,          46,],
    [          12,          28,],
    [          14,          10,],
    ],
    [
    [           3,         109,],
    [           5,          91,],
    [           7,          73,],
    [           9,          55,],
    [          11,          37,],
    [          13,          19,],
    [          15,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test04_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([7,5],'quad9',vertices=np.array([[1,1],[2,2],[2,4],[1,4]]),ratio=np.array([1,2,3,4]),factor=np.array([1.2,1.3,1.4,1.5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 165
    mesh_ez.elshape = 6
    mesh_ez.nelem = 35
    mesh_ez.elnumnod = 9
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           3,           5,           7,           9,          11,          13,          31,          33,          35,          37,          39,          41,          43,          61,          63,          65,          67,          69,          71,          73,          91,          93,          95,          97,          99,         101,         103,         121,         123,         125,         127,         129,         131,         133,],
    [           2,           4,           6,           8,          10,          12,          14,          32,          34,          36,          38,          40,          42,          44,          62,          64,          66,          68,          70,          72,          74,          92,          94,          96,          98,         100,         102,         104,         122,         124,         126,         128,         130,         132,         134,],
    [           3,           5,           7,           9,          11,          13,          15,          33,          35,          37,          39,          41,          43,          45,          63,          65,          67,          69,          71,          73,          75,          93,          95,          97,          99,         101,         103,         105,         123,         125,         127,         129,         131,         133,         135,],
    [          18,          20,          22,          24,          26,          28,          30,          48,          50,          52,          54,          56,          58,          60,          78,          80,          82,          84,          86,          88,          90,         108,         110,         112,         114,         116,         118,         120,         138,         140,         142,         144,         146,         148,         150,],
    [          33,          35,          37,          39,          41,          43,          45,          63,          65,          67,          69,          71,          73,          75,          93,          95,          97,          99,         101,         103,         105,         123,         125,         127,         129,         131,         133,         135,         153,         155,         157,         159,         161,         163,         165,],
    [          32,          34,          36,          38,          40,          42,          44,          62,          64,          66,          68,          70,          72,          74,          92,          94,          96,          98,         100,         102,         104,         122,         124,         126,         128,         130,         132,         134,         152,         154,         156,         158,         160,         162,         164,],
    [          31,          33,          35,          37,          39,          41,          43,          61,          63,          65,          67,          69,          71,          73,          91,          93,          95,          97,          99,         101,         103,         121,         123,         125,         127,         129,         131,         133,         151,         153,         155,         157,         159,         161,         163,],
    [          16,          18,          20,          22,          24,          26,          28,          46,          48,          50,          52,          54,          56,          58,          76,          78,          80,          82,          84,          86,          88,         106,         108,         110,         112,         114,         116,         118,         136,         138,         140,         142,         144,         146,         148,],
    [          17,          19,          21,          23,          25,          27,          29,          47,          49,          51,          53,          55,          57,          59,          77,          79,          81,          83,          85,          87,          89,         107,         109,         111,         113,         115,         117,         119,         137,         139,         141,         143,         145,         147,         149,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.0650848075104054e+00,   1.0650848075104054e+00,],
    [   1.1301696150208107e+00,   1.1301696150208107e+00,],
    [   1.1972625049821670e+00,   1.1972625049821670e+00,],
    [   1.2643553949435233e+00,   1.2643553949435233e+00,],
    [   1.3335183233680565e+00,   1.3335183233680565e+00,],
    [   1.4026812517925893e+00,   1.4026812517925893e+00,],
    [   1.4739780862412508e+00,   1.4739780862412508e+00,],
    [   1.5452749206899121e+00,   1.5452749206899121e+00,],
    [   1.6187714992500057e+00,   1.6187714992500057e+00,],
    [   1.6922680778100991e+00,   1.6922680778100991e+00,],
    [   1.7680322698925632e+00,   1.7680322698925632e+00,],
    [   1.8437964619750271e+00,   1.8437964619750271e+00,],
    [   1.9218982309875137e+00,   1.9218982309875137e+00,],
    [   2.0000000000000000e+00,   2.0000000000000000e+00,],
    [   1.0000000000000000e+00,   1.1137440758293837e+00,],
    [   1.0648859011690885e+00,   1.1794790798717723e+00,],
    [   1.1297603163023737e+00,   1.2450561735452141e+00,],
    [   1.1966908049400136e+00,   1.3125583230656679e+00,],
    [   1.2636128238840754e+00,   1.3798962811667514e+00,],
    [   1.3326650967576441e+00,   1.4492145834861985e+00,],
    [   1.4017124457986654e+00,   1.5183622548867033e+00,],
    [   1.4729680054957834e+00,   1.5895476303741114e+00,],
    [   1.5442227841527687e+00,   1.6605557794231001e+00,],
    [   1.6177677959668992e+00,   1.7336611914391273e+00,],
    [   1.6913168421134936e+00,   1.8065826283093758e+00,],
    [   1.7672425278378472e+00,   1.8816632237362021e+00,],
    [   1.8431778208078162e+00,   1.9565529453079187e+00,],
    [   1.9215808938017138e+00,   2.0336662063856084e+00,],
    [   2.0000000000000000e+00,   2.1105815483628403e+00,],
    [   1.0000000000000000e+00,   1.2274881516587675e+00,],
    [   1.0646870300379685e+00,   1.2938686296166415e+00,],
    [   1.1293511624655703e+00,   1.3599349301916182e+00,],
    [   1.1961193795727101e+00,   1.4278459723825612e+00,],
    [   1.2628707034896531e+00,   1.4954300998801142e+00,],
    [   1.3318124487536054e+00,   1.5649068732683071e+00,],
    [   1.4007443657988636e+00,   1.6340434612132482e+00,],
    [   1.4719586927336645e+00,   1.7051223947086955e+00,],
    [   1.5431714590941539e+00,   1.7758472923440236e+00,],
    [   1.6167648118125895e+00,   1.8485661215250759e+00,],
    [   1.6903662358282783e+00,   1.9209164299964210e+00,],
    [   1.7664532085070586e+00,   1.9953142323622552e+00,],
    [   1.8425594325578654e+00,   2.0693283296177079e+00,],
    [   1.9212636214971941e+00,   2.1454455465484976e+00,],
    [   2.0000000000000000e+00,   2.2211630967256801e+00,],
    [   1.0000000000000000e+00,   1.3981042654028433e+00,],
    [   1.0643924159235918e+00,   1.4633575390787499e+00,],
    [   1.1287522013635338e+00,   1.5281654270558149e+00,],
    [   1.1952926017380181e+00,   1.5947357115746477e+00,],
    [   1.2618089032954991e+00,   1.6608415050972143e+00,],
    [   1.3306058636022047e+00,   1.7287506767104306e+00,],
    [   1.3993887859650718e+00,   1.7961751230355429e+00,],
    [   1.4705599411100823e+00,   1.8654450085776959e+00,],
    [   1.5417288639235207e+00,   1.9342086620805063e+00,],
    [   1.6154019079760131e+00,   2.0048608394989751e+00,],
    [   1.6890865177177712e+00,   2.0749838349999474e+00,],
    [   1.7654003340651236e+00,   2.1470393729794228e+00,],
    [   1.8417417918173400e+00,   2.2185411323774402e+00,],
    [   1.9208477337747856e+00,   2.2920202539030958e+00,],
    [   2.0000000000000000e+00,   2.3649191095973725e+00,],
    [   1.0000000000000000e+00,   1.5687203791469193e+00,],
    [   1.0640978468409994e+00,   1.6328546082707016e+00,],
    [   1.1281534233035999e+00,   1.6964148983086509e+00,],
    [   1.1944661668065006e+00,   1.7616550117634029e+00,],
    [   1.2607476593170457e+00,   1.8262951975738617e+00,],
    [   1.3293999846621647e+00,   1.8926475644954757e+00,],
    [   1.3980340828344757e+00,   1.9583720732015595e+00,],
    [   1.4691621073189611e+00,   2.0258409636061936e+00,],
    [   1.5402872289765410e+00,   2.0926518320838925e+00,],
    [   1.6140398469114030e+00,   2.1612388084655825e+00,],
    [   1.6878075304515345e+00,   2.2291350173481472e+00,],
    [   1.7643479460971583e+00,   2.2988381771771453e+00,],
    [   1.8409244396533642e+00,   2.3678148229296681e+00,],
    [   1.9204319194716422e+00,   2.4386278563328889e+00,],
    [   2.0000000000000000e+00,   2.5086751224690644e+00,],
    [   1.0000000000000000e+00,   1.8246445497630330e+00,],
    [   1.0636607379893075e+00,   1.8844328137690050e+00,],
    [   1.1272742254787798e+00,   1.9435864976870647e+00,],
    [   1.1932655394539369e+00,   2.0043278271448921e+00,],
    [   1.2592218532752941e+00,   2.0644025304763565e+00,],
    [   1.3276843167560592e+00,   2.1260890501723546e+00,],
    [   1.3961263243421063e+00,   2.1870740881945467e+00,],
    [   1.4672138521963705e+00,   2.2496933528580731e+00,],
    [   1.5382981151235962e+00,   2.3115730269673733e+00,],
    [   1.6121795739166713e+00,   2.3751069404125413e+00,],
    [   1.6860780173129388e+00,   2.4378593681040113e+00,],
    [   1.7629390685337021e+00,   2.5022828552903804e+00,],
    [   1.8398408946966618e+00,   2.5658785326851596e+00,],
    [   1.9198861110777750e+00,   2.6311579061144914e+00,],
    [   2.0000000000000000e+00,   2.6955579392022644e+00,],
    [   1.0000000000000000e+00,   2.0805687203791470e+00,],
    [   1.0632236653473000e+00,   2.1360651751601383e+00,],
    [   1.1263951732577102e+00,   2.1908688507683465e+00,],
    [   1.1920651819367003e+00,   2.2471544668768830e+00,],
    [   1.2576964803273696e+00,   2.3027086235313163e+00,],
    [   1.3259691929486799e+00,   2.3597578443509568e+00,],
    [   1.3942192343540083e+00,   2.4160331015230092e+00,],
    [   1.4652662897331532e+00,   2.4738126902857669e+00,],
    [   1.5363097186294428e+00,   2.5307713566106256e+00,],
    [   1.6103199241995492e+00,   2.5892387172190907e+00,],
    [   1.6843490393612699e+00,   2.6468329818184886e+00,],
    [   1.7615305437088882e+00,   2.7059341055059214e+00,],
    [   1.8387575569772423e+00,   2.7641038247594487e+00,],
    [   1.9193403549040560e+00,   2.8237707734090156e+00,],
    [   2.0000000000000000e+00,   2.8824407559354643e+00,],
    [   1.0000000000000000e+00,   2.4644549763033172e+00,],
    [   1.0625740791399743e+00,   2.5101848366972970e+00,],
    [   1.1251006670057428e+00,   2.5552969093077267e+00,],
    [   1.1903142827412778e+00,   2.6017266662451544e+00,],
    [   1.2554925312604195e+00,   2.6474977272279538e+00,],
    [   1.3235153704426641e+00,   2.6945909772273855e+00,],
    [   1.3915174271526043e+00,   2.7409803226519402e+00,],
    [   1.4625351181710817e+00,   2.7886909120186996e+00,],
    [   1.5335494739835407e+00,   2.8356474011620030e+00,],
    [   1.6077655021730399e+00,   2.8839174660200770e+00,],
    [   1.6819989763658094e+00,   2.9313774246391162e+00,],
    [   1.7596368786679712e+00,   2.9801350193843685e+00,],
    [   1.8373168966985811e+00,   3.0280197001099163e+00,],
    [   1.9186227842200143e+00,   3.0771759200998918e+00,],
    [   2.0000000000000000e+00,   3.1253884176886242e+00,],
    [   1.0000000000000000e+00,   2.8483412322274879e+00,],
    [   1.0619244500028389e+00,   2.8844948884190229e+00,],
    [   1.1238059897105730e+00,   2.9201021073481748e+00,],
    [   1.1885630695760248e+00,   2.9568058430068094e+00,],
    [   1.2532880830321802e+00,   2.9929210590175077e+00,],
    [   1.3210609269877747e+00,   3.0301257902657337e+00,],
    [   1.3888148644852496e+00,   3.0666952358449073e+00,],
    [   1.4598031717826423e+00,   3.1043401250885148e+00,],
    [   1.5307884349954062e+00,   3.1412975467433544e+00,],
    [   1.6052103972232494e+00,   3.1793077856820000e+00,],
    [   1.6796483331049354e+00,   3.2165720853553825e+00,],
    [   1.7577428353342963e+00,   3.2548562359887980e+00,],
    [   1.8358760165797086e+00,   3.2923286389330619e+00,],
    [   1.9179051587645457e+00,   3.3307754354028178e+00,],
    [   2.0000000000000000e+00,   3.3683360794417840e+00,],
    [   1.0000000000000000e+00,   3.4241706161137442e+00,],
    [   1.0609574684708118e+00,   3.4419671711393609e+00,],
    [   1.1218938095069411e+00,   3.4595048124218017e+00,],
    [   1.1859981132707356e+00,   3.4776814523311175e+00,],
    [   1.2500865360191109e+00,   3.4955740334064189e+00,],
    [   1.3175285610726126e+00,   3.5141010488759417e+00,],
    [   1.3849611721385795e+00,   3.5323160030566254e+00,],
    [   1.4559460220886185e+00,   3.5511561558281546e+00,],
    [   1.5269293489210973e+00,   3.5696530000701965e+00,],
    [   1.6016776796271031e+00,   3.5887602650324775e+00,],
    [   1.6764340373825064e+00,   3.6074892799806677e+00,],
    [   1.7551835470376820e+00,   3.6268073779692500e+00,],
    [   1.8339525662150407e+00,   3.6457080672931301e+00,],
    [   1.9169596625283059e+00,   3.6651687508379776e+00,],
    [   2.0000000000000000e+00,   3.6841680397208920e+00,],
    [   1.0000000000000000e+00,   4.0000000000000000e+00,],
    [   1.0599901516735093e+00,   4.0000000000000000e+00,],
    [   1.1199803033470188e+00,   4.0000000000000000e+00,],
    [   1.1834307425442456e+00,   4.0000000000000000e+00,],
    [   1.2468811817414724e+00,   4.0000000000000000e+00,],
    [   1.3139915010524132e+00,   4.0000000000000000e+00,],
    [   1.3811018203633538e+00,   4.0000000000000000e+00,],
    [   1.4520831250634996e+00,   4.0000000000000000e+00,],
    [   1.5230644297636453e+00,   4.0000000000000000e+00,],
    [   1.5981400018763463e+00,   4.0000000000000000e+00,],
    [   1.6732155739890473e+00,   4.0000000000000000e+00,],
    [   1.7526215746516105e+00,   4.0000000000000000e+00,],
    [   1.8320275753141737e+00,   4.0000000000000000e+00,],
    [   1.9160137876570869e+00,   4.0000000000000000e+00,],
    [   2.0000000000000000e+00,   4.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
              15,
             165,
             151,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 2
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 3
    mesh_ez.curves[0].nnodes = 15
    mesh_ez.curves[0].nelem = 7
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
               9,
              10,
              11,
              12,
              13,
              14,
              15,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    [           9,           9,],
    [          11,          11,],
    [          13,          13,],
    ],
    [
    [           2,           2,],
    [           4,           4,],
    [           6,           6,],
    [           8,           8,],
    [          10,          10,],
    [          12,          12,],
    [          14,          14,],
    ],
    [
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    [           9,           9,],
    [          11,          11,],
    [          13,          13,],
    [          15,          15,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 2
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 3
    mesh_ez.curves[1].nnodes = 11
    mesh_ez.curves[1].nelem = 5
    mesh_ez.curves[1].nodes = np.array([
              15,
              30,
              45,
              60,
              75,
              90,
             105,
             120,
             135,
             150,
             165,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,          15,],
    [           3,          45,],
    [           5,          75,],
    [           7,         105,],
    [           9,         135,],
    ],
    [
    [           2,          30,],
    [           4,          60,],
    [           6,          90,],
    [           8,         120,],
    [          10,         150,],
    ],
    [
    [           3,          45,],
    [           5,          75,],
    [           7,         105,],
    [           9,         135,],
    [          11,         165,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 2
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 3
    mesh_ez.curves[2].nnodes = 15
    mesh_ez.curves[2].nelem = 7
    mesh_ez.curves[2].nodes = np.array([
             165,
             164,
             163,
             162,
             161,
             160,
             159,
             158,
             157,
             156,
             155,
             154,
             153,
             152,
             151,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,         165,],
    [           3,         163,],
    [           5,         161,],
    [           7,         159,],
    [           9,         157,],
    [          11,         155,],
    [          13,         153,],
    ],
    [
    [           2,         164,],
    [           4,         162,],
    [           6,         160,],
    [           8,         158,],
    [          10,         156,],
    [          12,         154,],
    [          14,         152,],
    ],
    [
    [           3,         163,],
    [           5,         161,],
    [           7,         159,],
    [           9,         157,],
    [          11,         155,],
    [          13,         153,],
    [          15,         151,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 2
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 3
    mesh_ez.curves[3].nnodes = 11
    mesh_ez.curves[3].nelem = 5
    mesh_ez.curves[3].nodes = np.array([
             151,
             136,
             121,
             106,
              91,
              76,
              61,
              46,
              31,
              16,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,         151,],
    [           3,         121,],
    [           5,          91,],
    [           7,          61,],
    [           9,          31,],
    ],
    [
    [           2,         136,],
    [           4,         106,],
    [           6,          76,],
    [           8,          46,],
    [          10,          16,],
    ],
    [
    [           3,         121,],
    [           5,          91,],
    [           7,          61,],
    [           9,          31,],
    [          11,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test05_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([4,7],'quad5',origin=np.array([1,1]),length=np.array([7,5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 68
    mesh_ez.elshape = 9
    mesh_ez.nelem = 28
    mesh_ez.elnumnod = 5
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           2,           3,           4,          10,          11,          12,          13,          19,          20,          21,          22,          28,          29,          30,          31,          37,          38,          39,          40,          46,          47,          48,          49,          55,          56,          57,          58,],
    [           2,           3,           4,           5,          11,          12,          13,          14,          20,          21,          22,          23,          29,          30,          31,          32,          38,          39,          40,          41,          47,          48,          49,          50,          56,          57,          58,          59,],
    [          11,          12,          13,          14,          20,          21,          22,          23,          29,          30,          31,          32,          38,          39,          40,          41,          47,          48,          49,          50,          56,          57,          58,          59,          65,          66,          67,          68,],
    [          10,          11,          12,          13,          19,          20,          21,          22,          28,          29,          30,          31,          37,          38,          39,          40,          46,          47,          48,          49,          55,          56,          57,          58,          64,          65,          66,          67,],
    [           6,           7,           8,           9,          15,          16,          17,          18,          24,          25,          26,          27,          33,          34,          35,          36,          42,          43,          44,          45,          51,          52,          53,          54,          60,          61,          62,          63,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   2.7500000000000000e+00,   1.0000000000000000e+00,],
    [   4.5000000000000000e+00,   1.0000000000000000e+00,],
    [   6.2500000000000000e+00,   1.0000000000000000e+00,],
    [   8.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.8750000000000000e+00,   1.3571428571428572e+00,],
    [   3.6250000000000000e+00,   1.3571428571428572e+00,],
    [   5.3750000000000000e+00,   1.3571428571428572e+00,],
    [   7.1250000000000000e+00,   1.3571428571428572e+00,],
    [   1.0000000000000000e+00,   1.7142857142857142e+00,],
    [   2.7500000000000000e+00,   1.7142857142857142e+00,],
    [   4.5000000000000000e+00,   1.7142857142857142e+00,],
    [   6.2500000000000000e+00,   1.7142857142857142e+00,],
    [   8.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.8750000000000000e+00,   2.0714285714285712e+00,],
    [   3.6250000000000000e+00,   2.0714285714285712e+00,],
    [   5.3750000000000000e+00,   2.0714285714285712e+00,],
    [   7.1250000000000000e+00,   2.0714285714285712e+00,],
    [   1.0000000000000000e+00,   2.4285714285714284e+00,],
    [   2.7500000000000000e+00,   2.4285714285714284e+00,],
    [   4.5000000000000000e+00,   2.4285714285714284e+00,],
    [   6.2500000000000000e+00,   2.4285714285714284e+00,],
    [   8.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.8750000000000000e+00,   2.7857142857142856e+00,],
    [   3.6250000000000000e+00,   2.7857142857142856e+00,],
    [   5.3750000000000000e+00,   2.7857142857142856e+00,],
    [   7.1250000000000000e+00,   2.7857142857142856e+00,],
    [   1.0000000000000000e+00,   3.1428571428571428e+00,],
    [   2.7500000000000000e+00,   3.1428571428571428e+00,],
    [   4.5000000000000000e+00,   3.1428571428571428e+00,],
    [   6.2500000000000000e+00,   3.1428571428571428e+00,],
    [   8.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.8750000000000000e+00,   3.5000000000000000e+00,],
    [   3.6250000000000000e+00,   3.5000000000000000e+00,],
    [   5.3750000000000000e+00,   3.5000000000000000e+00,],
    [   7.1250000000000000e+00,   3.5000000000000000e+00,],
    [   1.0000000000000000e+00,   3.8571428571428568e+00,],
    [   2.7500000000000000e+00,   3.8571428571428568e+00,],
    [   4.5000000000000000e+00,   3.8571428571428568e+00,],
    [   6.2500000000000000e+00,   3.8571428571428568e+00,],
    [   8.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.8750000000000000e+00,   4.2142857142857135e+00,],
    [   3.6250000000000000e+00,   4.2142857142857135e+00,],
    [   5.3750000000000000e+00,   4.2142857142857135e+00,],
    [   7.1250000000000000e+00,   4.2142857142857135e+00,],
    [   1.0000000000000000e+00,   4.5714285714285712e+00,],
    [   2.7500000000000000e+00,   4.5714285714285712e+00,],
    [   4.5000000000000000e+00,   4.5714285714285712e+00,],
    [   6.2500000000000000e+00,   4.5714285714285712e+00,],
    [   8.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.8750000000000000e+00,   4.9285714285714279e+00,],
    [   3.6250000000000000e+00,   4.9285714285714279e+00,],
    [   5.3750000000000000e+00,   4.9285714285714279e+00,],
    [   7.1250000000000000e+00,   4.9285714285714279e+00,],
    [   1.0000000000000000e+00,   5.2857142857142856e+00,],
    [   2.7500000000000000e+00,   5.2857142857142856e+00,],
    [   4.5000000000000000e+00,   5.2857142857142856e+00,],
    [   6.2500000000000000e+00,   5.2857142857142856e+00,],
    [   8.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.8750000000000000e+00,   5.6428571428571423e+00,],
    [   3.6250000000000000e+00,   5.6428571428571423e+00,],
    [   5.3750000000000000e+00,   5.6428571428571423e+00,],
    [   7.1250000000000000e+00,   5.6428571428571423e+00,],
    [   1.0000000000000000e+00,   6.0000000000000000e+00,],
    [   2.7500000000000000e+00,   6.0000000000000000e+00,],
    [   4.5000000000000000e+00,   6.0000000000000000e+00,],
    [   6.2500000000000000e+00,   6.0000000000000000e+00,],
    [   8.0000000000000000e+00,   6.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               5,
              68,
              64,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 5
    mesh_ez.curves[0].nelem = 4
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 8
    mesh_ez.curves[1].nelem = 7
    mesh_ez.curves[1].nodes = np.array([
               5,
              14,
              23,
              32,
              41,
              50,
              59,
              68,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           5,],
    [           2,          14,],
    [           3,          23,],
    [           4,          32,],
    [           5,          41,],
    [           6,          50,],
    [           7,          59,],
    ],
    [
    [           2,          14,],
    [           3,          23,],
    [           4,          32,],
    [           5,          41,],
    [           6,          50,],
    [           7,          59,],
    [           8,          68,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 5
    mesh_ez.curves[2].nelem = 4
    mesh_ez.curves[2].nodes = np.array([
              68,
              67,
              66,
              65,
              64,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          68,],
    [           2,          67,],
    [           3,          66,],
    [           4,          65,],
    ],
    [
    [           2,          67,],
    [           3,          66,],
    [           4,          65,],
    [           5,          64,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 8
    mesh_ez.curves[3].nelem = 7
    mesh_ez.curves[3].nodes = np.array([
              64,
              55,
              46,
              37,
              28,
              19,
              10,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,          64,],
    [           2,          55,],
    [           3,          46,],
    [           4,          37,],
    [           5,          28,],
    [           6,          19,],
    [           7,          10,],
    ],
    [
    [           2,          55,],
    [           3,          46,],
    [           4,          37,],
    [           5,          28,],
    [           6,          19,],
    [           7,          10,],
    [           8,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test06_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([7,5],'quad5',vertices=np.array([[1,1],[2,2],[2,4],[1,4]]),ratio=np.array([1,2,3,4]),factor=np.array([1.2,1.3,1.4,1.5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 83
    mesh_ez.elshape = 9
    mesh_ez.nelem = 35
    mesh_ez.elnumnod = 5
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           2,           3,           4,           5,           6,           7,          16,          17,          18,          19,          20,          21,          22,          31,          32,          33,          34,          35,          36,          37,          46,          47,          48,          49,          50,          51,          52,          61,          62,          63,          64,          65,          66,          67,],
    [           2,           3,           4,           5,           6,           7,           8,          17,          18,          19,          20,          21,          22,          23,          32,          33,          34,          35,          36,          37,          38,          47,          48,          49,          50,          51,          52,          53,          62,          63,          64,          65,          66,          67,          68,],
    [          17,          18,          19,          20,          21,          22,          23,          32,          33,          34,          35,          36,          37,          38,          47,          48,          49,          50,          51,          52,          53,          62,          63,          64,          65,          66,          67,          68,          77,          78,          79,          80,          81,          82,          83,],
    [          16,          17,          18,          19,          20,          21,          22,          31,          32,          33,          34,          35,          36,          37,          46,          47,          48,          49,          50,          51,          52,          61,          62,          63,          64,          65,          66,          67,          76,          77,          78,          79,          80,          81,          82,],
    [           9,          10,          11,          12,          13,          14,          15,          24,          25,          26,          27,          28,          29,          30,          39,          40,          41,          42,          43,          44,          45,          54,          55,          56,          57,          58,          59,          60,          69,          70,          71,          72,          73,          74,          75,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.1301696150208107e+00,   1.1301696150208107e+00,],
    [   1.2643553949435233e+00,   1.2643553949435233e+00,],
    [   1.4026812517925893e+00,   1.4026812517925893e+00,],
    [   1.5452749206899121e+00,   1.5452749206899121e+00,],
    [   1.6922680778100991e+00,   1.6922680778100991e+00,],
    [   1.8437964619750271e+00,   1.8437964619750271e+00,],
    [   2.0000000000000000e+00,   2.0000000000000000e+00,],
    [   1.0648801943715953e+00,   1.1794628693774600e+00,],
    [   1.1966867189798895e+00,   1.3125261600756772e+00,],
    [   1.3326629290061573e+00,   1.4491727642789543e+00,],
    [   1.4729679993438798e+00,   1.5895032714052071e+00,],
    [   1.6177701733556109e+00,   1.7336221028740644e+00,],
    [   1.7672475520428175e+00,   1.8816377410921372e+00,],
    [   1.9215889736332232e+00,   2.0336629735686045e+00,],
    [   1.0000000000000000e+00,   1.2274881516587675e+00,],
    [   1.1293511624655703e+00,   1.3599349301916182e+00,],
    [   1.2628707034896531e+00,   1.4954300998801142e+00,],
    [   1.4007443657988636e+00,   1.6340434612132482e+00,],
    [   1.5431714590941539e+00,   1.7758472923440236e+00,],
    [   1.6903662358282783e+00,   1.9209164299964210e+00,],
    [   1.8425594325578654e+00,   2.0693283296177079e+00,],
    [   2.0000000000000000e+00,   2.2211630967256801e+00,],
    [   1.0643761464422925e+00,   1.4633279135416828e+00,],
    [   1.1952807371439671e+00,   1.5946889400366471e+00,],
    [   1.3305992028600098e+00,   1.7286957226415045e+00,],
    [   1.4705592841760087e+00,   1.8653912841948728e+00,],
    [   1.6154081135876268e+00,   2.0048180766160182e+00,],
    [   1.7654144096227604e+00,   2.1470174537693434e+00,],
    [   1.9208709680528075e+00,   2.2920289913649463e+00,],
    [   1.0000000000000000e+00,   1.5687203791469193e+00,],
    [   1.1281534233035999e+00,   1.6964148983086509e+00,],
    [   1.2607476593170457e+00,   1.8262951975738617e+00,],
    [   1.3980340828344757e+00,   1.9583720732015595e+00,],
    [   1.5402872289765410e+00,   2.0926518320838925e+00,],
    [   1.6878075304515345e+00,   2.2291350173481472e+00,],
    [   1.8409244396533642e+00,   2.3678148229296681e+00,],
    [   2.0000000000000000e+00,   2.5086751224690644e+00,],
    [   1.0636371491403276e+00,   1.8844002714158110e+00,],
    [   1.1932481840514315e+00,   2.0042844881602244e+00,],
    [   1.3276743642082249e+00,   2.1260428241081435e+00,],
    [   1.4672125661986168e+00,   2.2496520959718893e+00,],
    [   1.6121883793546972e+00,   2.3750783616850493e+00,],
    [   1.7629596416108528e+00,   2.5022743960489624e+00,],
    [   1.9199204991576515e+00,   2.6311765850837201e+00,],
    [   1.0000000000000000e+00,   2.0805687203791470e+00,],
    [   1.1263951732577102e+00,   2.1908688507683465e+00,],
    [   1.2576964803273696e+00,   2.3027086235313163e+00,],
    [   1.3942192343540083e+00,   2.4160331015230092e+00,],
    [   1.5363097186294428e+00,   2.5307713566106256e+00,],
    [   1.6843490393612699e+00,   2.6468329818184886e+00,],
    [   1.8387575569772423e+00,   2.7641038247594487e+00,],
    [   2.0000000000000000e+00,   2.8824407559354643e+00,],
    [   1.0625502907420707e+00,   2.5101798995395126e+00,],
    [   1.1902964315819582e+00,   2.6017459352136671e+00,],
    [   1.3235046655497023e+00,   2.6946262219338113e+00,],
    [   1.4625330631160267e+00,   2.7887345115406914e+00,],
    [   1.6077738815227636e+00,   2.8839625344089139e+00,],
    [   1.7596577365057890e+00,   2.9801755513444022e+00,],
    [   1.9186583933892378e+00,   3.0772069611906310e+00,],
    [   1.0000000000000000e+00,   2.8483412322274879e+00,],
    [   1.1238059897105730e+00,   2.9201021073481748e+00,],
    [   1.2532880830321802e+00,   2.9929210590175077e+00,],
    [   1.3888148644852496e+00,   3.0666952358449073e+00,],
    [   1.5307884349954062e+00,   3.1412975467433544e+00,],
    [   1.6796483331049354e+00,   3.2165720853553825e+00,],
    [   1.8358760165797086e+00,   3.2923286389330619e+00,],
    [   2.0000000000000000e+00,   3.3683360794417840e+00,],
    [   1.0609465732643981e+00,   3.4420596623078583e+00,],
    [   1.1859888894578110e+00,   3.4779238067135738e+00,],
    [   1.3175214874055641e+00,   3.5144213287906965e+00,],
    [   1.4559423874019140e+00,   3.5514892847787283e+00,],
    [   1.6016791929632586e+00,   3.5890494743892822e+00,],
    [   1.7551918747469664e+00,   3.6270057294046874e+00,],
    [   1.9169758979734706e+00,   3.6652407050797864e+00,],
    [   1.0000000000000000e+00,   4.0000000000000000e+00,],
    [   1.1199803033470188e+00,   4.0000000000000000e+00,],
    [   1.2468811817414724e+00,   4.0000000000000000e+00,],
    [   1.3811018203633538e+00,   4.0000000000000000e+00,],
    [   1.5230644297636453e+00,   4.0000000000000000e+00,],
    [   1.6732155739890473e+00,   4.0000000000000000e+00,],
    [   1.8320275753141737e+00,   4.0000000000000000e+00,],
    [   2.0000000000000000e+00,   4.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               8,
              83,
              76,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 8
    mesh_ez.curves[0].nelem = 7
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    [           6,           6,],
    [           7,           7,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    [           6,           6,],
    [           7,           7,],
    [           8,           8,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 6
    mesh_ez.curves[1].nelem = 5
    mesh_ez.curves[1].nodes = np.array([
               8,
              23,
              38,
              53,
              68,
              83,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           8,],
    [           2,          23,],
    [           3,          38,],
    [           4,          53,],
    [           5,          68,],
    ],
    [
    [           2,          23,],
    [           3,          38,],
    [           4,          53,],
    [           5,          68,],
    [           6,          83,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 8
    mesh_ez.curves[2].nelem = 7
    mesh_ez.curves[2].nodes = np.array([
              83,
              82,
              81,
              80,
              79,
              78,
              77,
              76,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          83,],
    [           2,          82,],
    [           3,          81,],
    [           4,          80,],
    [           5,          79,],
    [           6,          78,],
    [           7,          77,],
    ],
    [
    [           2,          82,],
    [           3,          81,],
    [           4,          80,],
    [           5,          79,],
    [           6,          78,],
    [           7,          77,],
    [           8,          76,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 6
    mesh_ez.curves[3].nelem = 5
    mesh_ez.curves[3].nodes = np.array([
              76,
              61,
              46,
              31,
              16,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,          76,],
    [           2,          61,],
    [           3,          46,],
    [           4,          31,],
    [           5,          16,],
    ],
    [
    [           2,          61,],
    [           3,          46,],
    [           4,          31,],
    [           5,          16,],
    [           6,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test07_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([4,7],'tria3',origin=np.array([1,1]),length=np.array([7,5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 40
    mesh_ez.elshape = 3
    mesh_ez.nelem = 56
    mesh_ez.elnumnod = 3
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           1,           2,           2,           3,           3,           4,           4,           6,           6,           7,           7,           8,           8,           9,           9,          11,          11,          12,          12,          13,          13,          14,          14,          16,          16,          17,          17,          18,          18,          19,          19,          21,          21,          22,          22,          23,          23,          24,          24,          26,          26,          27,          27,          28,          28,          29,          29,          31,          31,          32,          32,          33,          33,          34,          34,],
    [           7,           2,           8,           3,           9,           4,          10,           5,          12,           7,          13,           8,          14,           9,          15,          10,          17,          12,          18,          13,          19,          14,          20,          15,          22,          17,          23,          18,          24,          19,          25,          20,          27,          22,          28,          23,          29,          24,          30,          25,          32,          27,          33,          28,          34,          29,          35,          30,          37,          32,          38,          33,          39,          34,          40,          35,],
    [           6,           7,           7,           8,           8,           9,           9,          10,          11,          12,          12,          13,          13,          14,          14,          15,          16,          17,          17,          18,          18,          19,          19,          20,          21,          22,          22,          23,          23,          24,          24,          25,          26,          27,          27,          28,          28,          29,          29,          30,          31,          32,          32,          33,          33,          34,          34,          35,          36,          37,          37,          38,          38,          39,          39,          40,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   2.7500000000000000e+00,   1.0000000000000000e+00,],
    [   4.5000000000000000e+00,   1.0000000000000000e+00,],
    [   6.2500000000000000e+00,   1.0000000000000000e+00,],
    [   8.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.0000000000000000e+00,   1.7142857142857142e+00,],
    [   2.7500000000000000e+00,   1.7142857142857142e+00,],
    [   4.5000000000000000e+00,   1.7142857142857142e+00,],
    [   6.2500000000000000e+00,   1.7142857142857142e+00,],
    [   8.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.0000000000000000e+00,   2.4285714285714284e+00,],
    [   2.7500000000000000e+00,   2.4285714285714284e+00,],
    [   4.5000000000000000e+00,   2.4285714285714284e+00,],
    [   6.2500000000000000e+00,   2.4285714285714284e+00,],
    [   8.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.0000000000000000e+00,   3.1428571428571428e+00,],
    [   2.7500000000000000e+00,   3.1428571428571428e+00,],
    [   4.5000000000000000e+00,   3.1428571428571428e+00,],
    [   6.2500000000000000e+00,   3.1428571428571428e+00,],
    [   8.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.0000000000000000e+00,   3.8571428571428568e+00,],
    [   2.7500000000000000e+00,   3.8571428571428568e+00,],
    [   4.5000000000000000e+00,   3.8571428571428568e+00,],
    [   6.2500000000000000e+00,   3.8571428571428568e+00,],
    [   8.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.0000000000000000e+00,   4.5714285714285712e+00,],
    [   2.7500000000000000e+00,   4.5714285714285712e+00,],
    [   4.5000000000000000e+00,   4.5714285714285712e+00,],
    [   6.2500000000000000e+00,   4.5714285714285712e+00,],
    [   8.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.0000000000000000e+00,   5.2857142857142856e+00,],
    [   2.7500000000000000e+00,   5.2857142857142856e+00,],
    [   4.5000000000000000e+00,   5.2857142857142856e+00,],
    [   6.2500000000000000e+00,   5.2857142857142856e+00,],
    [   8.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.0000000000000000e+00,   6.0000000000000000e+00,],
    [   2.7500000000000000e+00,   6.0000000000000000e+00,],
    [   4.5000000000000000e+00,   6.0000000000000000e+00,],
    [   6.2500000000000000e+00,   6.0000000000000000e+00,],
    [   8.0000000000000000e+00,   6.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               5,
              40,
              36,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 5
    mesh_ez.curves[0].nelem = 4
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 8
    mesh_ez.curves[1].nelem = 7
    mesh_ez.curves[1].nodes = np.array([
               5,
              10,
              15,
              20,
              25,
              30,
              35,
              40,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           5,],
    [           2,          10,],
    [           3,          15,],
    [           4,          20,],
    [           5,          25,],
    [           6,          30,],
    [           7,          35,],
    ],
    [
    [           2,          10,],
    [           3,          15,],
    [           4,          20,],
    [           5,          25,],
    [           6,          30,],
    [           7,          35,],
    [           8,          40,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 5
    mesh_ez.curves[2].nelem = 4
    mesh_ez.curves[2].nodes = np.array([
              40,
              39,
              38,
              37,
              36,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          40,],
    [           2,          39,],
    [           3,          38,],
    [           4,          37,],
    ],
    [
    [           2,          39,],
    [           3,          38,],
    [           4,          37,],
    [           5,          36,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 8
    mesh_ez.curves[3].nelem = 7
    mesh_ez.curves[3].nodes = np.array([
              36,
              31,
              26,
              21,
              16,
              11,
               6,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,          36,],
    [           2,          31,],
    [           3,          26,],
    [           4,          21,],
    [           5,          16,],
    [           6,          11,],
    [           7,           6,],
    ],
    [
    [           2,          31,],
    [           3,          26,],
    [           4,          21,],
    [           5,          16,],
    [           6,          11,],
    [           7,           6,],
    [           8,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test08_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([7,5],'tria3',vertices=np.array([[1,1],[2,2],[2,4],[1,4]]),ratio=np.array([1,2,3,4]),factor=np.array([1.2,1.3,1.4,1.5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 48
    mesh_ez.elshape = 3
    mesh_ez.nelem = 70
    mesh_ez.elnumnod = 3
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           1,           2,           2,           3,           3,           4,           4,           5,           5,           6,           6,           7,           7,           9,           9,          10,          10,          11,          11,          12,          12,          13,          13,          14,          14,          15,          15,          17,          17,          18,          18,          19,          19,          20,          20,          21,          21,          22,          22,          23,          23,          25,          25,          26,          26,          27,          27,          28,          28,          29,          29,          30,          30,          31,          31,          33,          33,          34,          34,          35,          35,          36,          36,          37,          37,          38,          38,          39,          39,],
    [          10,           2,          11,           3,          12,           4,          13,           5,          14,           6,          15,           7,          16,           8,          18,          10,          19,          11,          20,          12,          21,          13,          22,          14,          23,          15,          24,          16,          26,          18,          27,          19,          28,          20,          29,          21,          30,          22,          31,          23,          32,          24,          34,          26,          35,          27,          36,          28,          37,          29,          38,          30,          39,          31,          40,          32,          42,          34,          43,          35,          44,          36,          45,          37,          46,          38,          47,          39,          48,          40,],
    [           9,          10,          10,          11,          11,          12,          12,          13,          13,          14,          14,          15,          15,          16,          17,          18,          18,          19,          19,          20,          20,          21,          21,          22,          22,          23,          23,          24,          25,          26,          26,          27,          27,          28,          28,          29,          29,          30,          30,          31,          31,          32,          33,          34,          34,          35,          35,          36,          36,          37,          37,          38,          38,          39,          39,          40,          41,          42,          42,          43,          43,          44,          44,          45,          45,          46,          46,          47,          47,          48,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.1301696150208107e+00,   1.1301696150208107e+00,],
    [   1.2643553949435233e+00,   1.2643553949435233e+00,],
    [   1.4026812517925893e+00,   1.4026812517925893e+00,],
    [   1.5452749206899121e+00,   1.5452749206899121e+00,],
    [   1.6922680778100991e+00,   1.6922680778100991e+00,],
    [   1.8437964619750271e+00,   1.8437964619750271e+00,],
    [   2.0000000000000000e+00,   2.0000000000000000e+00,],
    [   1.0000000000000000e+00,   1.2274881516587675e+00,],
    [   1.1293511624655703e+00,   1.3599349301916182e+00,],
    [   1.2628707034896531e+00,   1.4954300998801142e+00,],
    [   1.4007443657988636e+00,   1.6340434612132482e+00,],
    [   1.5431714590941539e+00,   1.7758472923440236e+00,],
    [   1.6903662358282783e+00,   1.9209164299964210e+00,],
    [   1.8425594325578654e+00,   2.0693283296177079e+00,],
    [   2.0000000000000000e+00,   2.2211630967256801e+00,],
    [   1.0000000000000000e+00,   1.5687203791469193e+00,],
    [   1.1281534233035999e+00,   1.6964148983086509e+00,],
    [   1.2607476593170457e+00,   1.8262951975738617e+00,],
    [   1.3980340828344757e+00,   1.9583720732015595e+00,],
    [   1.5402872289765410e+00,   2.0926518320838925e+00,],
    [   1.6878075304515345e+00,   2.2291350173481472e+00,],
    [   1.8409244396533642e+00,   2.3678148229296681e+00,],
    [   2.0000000000000000e+00,   2.5086751224690644e+00,],
    [   1.0000000000000000e+00,   2.0805687203791470e+00,],
    [   1.1263951732577102e+00,   2.1908688507683465e+00,],
    [   1.2576964803273696e+00,   2.3027086235313163e+00,],
    [   1.3942192343540083e+00,   2.4160331015230092e+00,],
    [   1.5363097186294428e+00,   2.5307713566106256e+00,],
    [   1.6843490393612699e+00,   2.6468329818184886e+00,],
    [   1.8387575569772423e+00,   2.7641038247594487e+00,],
    [   2.0000000000000000e+00,   2.8824407559354643e+00,],
    [   1.0000000000000000e+00,   2.8483412322274879e+00,],
    [   1.1238059897105730e+00,   2.9201021073481748e+00,],
    [   1.2532880830321802e+00,   2.9929210590175077e+00,],
    [   1.3888148644852496e+00,   3.0666952358449073e+00,],
    [   1.5307884349954062e+00,   3.1412975467433544e+00,],
    [   1.6796483331049354e+00,   3.2165720853553825e+00,],
    [   1.8358760165797086e+00,   3.2923286389330619e+00,],
    [   2.0000000000000000e+00,   3.3683360794417840e+00,],
    [   1.0000000000000000e+00,   4.0000000000000000e+00,],
    [   1.1199803033470188e+00,   4.0000000000000000e+00,],
    [   1.2468811817414724e+00,   4.0000000000000000e+00,],
    [   1.3811018203633538e+00,   4.0000000000000000e+00,],
    [   1.5230644297636453e+00,   4.0000000000000000e+00,],
    [   1.6732155739890473e+00,   4.0000000000000000e+00,],
    [   1.8320275753141737e+00,   4.0000000000000000e+00,],
    [   2.0000000000000000e+00,   4.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               8,
              48,
              41,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 8
    mesh_ez.curves[0].nelem = 7
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    [           6,           6,],
    [           7,           7,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    [           6,           6,],
    [           7,           7,],
    [           8,           8,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 6
    mesh_ez.curves[1].nelem = 5
    mesh_ez.curves[1].nodes = np.array([
               8,
              16,
              24,
              32,
              40,
              48,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           8,],
    [           2,          16,],
    [           3,          24,],
    [           4,          32,],
    [           5,          40,],
    ],
    [
    [           2,          16,],
    [           3,          24,],
    [           4,          32,],
    [           5,          40,],
    [           6,          48,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 8
    mesh_ez.curves[2].nelem = 7
    mesh_ez.curves[2].nodes = np.array([
              48,
              47,
              46,
              45,
              44,
              43,
              42,
              41,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          48,],
    [           2,          47,],
    [           3,          46,],
    [           4,          45,],
    [           5,          44,],
    [           6,          43,],
    [           7,          42,],
    ],
    [
    [           2,          47,],
    [           3,          46,],
    [           4,          45,],
    [           5,          44,],
    [           6,          43,],
    [           7,          42,],
    [           8,          41,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 6
    mesh_ez.curves[3].nelem = 5
    mesh_ez.curves[3].nodes = np.array([
              41,
              33,
              25,
              17,
               9,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,          41,],
    [           2,          33,],
    [           3,          25,],
    [           4,          17,],
    [           5,           9,],
    ],
    [
    [           2,          33,],
    [           3,          25,],
    [           4,          17,],
    [           5,           9,],
    [           6,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test09_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([4,7],'tria4',origin=np.array([1,1]),length=np.array([7,5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 96
    mesh_ez.elshape = 10
    mesh_ez.nelem = 56
    mesh_ez.elnumnod = 4
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           1,           2,           2,           3,           3,           4,           4,          14,          14,          15,          15,          16,          16,          17,          17,          27,          27,          28,          28,          29,          29,          30,          30,          40,          40,          41,          41,          42,          42,          43,          43,          53,          53,          54,          54,          55,          55,          56,          56,          66,          66,          67,          67,          68,          68,          69,          69,          79,          79,          80,          80,          81,          81,          82,          82,],
    [          15,           2,          16,           3,          17,           4,          18,           5,          28,          15,          29,          16,          30,          17,          31,          18,          41,          28,          42,          29,          43,          30,          44,          31,          54,          41,          55,          42,          56,          43,          57,          44,          67,          54,          68,          55,          69,          56,          70,          57,          80,          67,          81,          68,          82,          69,          83,          70,          93,          80,          94,          81,          95,          82,          96,          83,],
    [          14,          15,          15,          16,          16,          17,          17,          18,          27,          28,          28,          29,          29,          30,          30,          31,          40,          41,          41,          42,          42,          43,          43,          44,          53,          54,          54,          55,          55,          56,          56,          57,          66,          67,          67,          68,          68,          69,          69,          70,          79,          80,          80,          81,          81,          82,          82,          83,          92,          93,          93,          94,          94,          95,          95,          96,],
    [           6,           7,           8,           9,          10,          11,          12,          13,          19,          20,          21,          22,          23,          24,          25,          26,          32,          33,          34,          35,          36,          37,          38,          39,          45,          46,          47,          48,          49,          50,          51,          52,          58,          59,          60,          61,          62,          63,          64,          65,          71,          72,          73,          74,          75,          76,          77,          78,          84,          85,          86,          87,          88,          89,          90,          91,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   2.7500000000000000e+00,   1.0000000000000000e+00,],
    [   4.5000000000000000e+00,   1.0000000000000000e+00,],
    [   6.2500000000000000e+00,   1.0000000000000000e+00,],
    [   8.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.5833333333333333e+00,   1.4761904761904763e+00,],
    [   2.1666666666666665e+00,   1.2380952380952381e+00,],
    [   3.3333333333333330e+00,   1.4761904761904763e+00,],
    [   3.9166666666666665e+00,   1.2380952380952381e+00,],
    [   5.0833333333333339e+00,   1.4761904761904763e+00,],
    [   5.6666666666666661e+00,   1.2380952380952381e+00,],
    [   6.8333333333333339e+00,   1.4761904761904763e+00,],
    [   7.4166666666666661e+00,   1.2380952380952381e+00,],
    [   1.0000000000000000e+00,   1.7142857142857142e+00,],
    [   2.7500000000000000e+00,   1.7142857142857142e+00,],
    [   4.5000000000000000e+00,   1.7142857142857142e+00,],
    [   6.2500000000000000e+00,   1.7142857142857142e+00,],
    [   8.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.5833333333333333e+00,   2.1904761904761907e+00,],
    [   2.1666666666666665e+00,   1.9523809523809523e+00,],
    [   3.3333333333333330e+00,   2.1904761904761907e+00,],
    [   3.9166666666666665e+00,   1.9523809523809523e+00,],
    [   5.0833333333333339e+00,   2.1904761904761907e+00,],
    [   5.6666666666666661e+00,   1.9523809523809523e+00,],
    [   6.8333333333333339e+00,   2.1904761904761907e+00,],
    [   7.4166666666666661e+00,   1.9523809523809523e+00,],
    [   1.0000000000000000e+00,   2.4285714285714284e+00,],
    [   2.7500000000000000e+00,   2.4285714285714284e+00,],
    [   4.5000000000000000e+00,   2.4285714285714284e+00,],
    [   6.2500000000000000e+00,   2.4285714285714284e+00,],
    [   8.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.5833333333333333e+00,   2.9047619047619047e+00,],
    [   2.1666666666666665e+00,   2.6666666666666665e+00,],
    [   3.3333333333333330e+00,   2.9047619047619047e+00,],
    [   3.9166666666666665e+00,   2.6666666666666665e+00,],
    [   5.0833333333333339e+00,   2.9047619047619047e+00,],
    [   5.6666666666666661e+00,   2.6666666666666665e+00,],
    [   6.8333333333333339e+00,   2.9047619047619047e+00,],
    [   7.4166666666666661e+00,   2.6666666666666665e+00,],
    [   1.0000000000000000e+00,   3.1428571428571428e+00,],
    [   2.7500000000000000e+00,   3.1428571428571428e+00,],
    [   4.5000000000000000e+00,   3.1428571428571428e+00,],
    [   6.2500000000000000e+00,   3.1428571428571428e+00,],
    [   8.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.5833333333333333e+00,   3.6190476190476186e+00,],
    [   2.1666666666666665e+00,   3.3809523809523809e+00,],
    [   3.3333333333333330e+00,   3.6190476190476186e+00,],
    [   3.9166666666666665e+00,   3.3809523809523809e+00,],
    [   5.0833333333333339e+00,   3.6190476190476186e+00,],
    [   5.6666666666666661e+00,   3.3809523809523809e+00,],
    [   6.8333333333333339e+00,   3.6190476190476186e+00,],
    [   7.4166666666666661e+00,   3.3809523809523809e+00,],
    [   1.0000000000000000e+00,   3.8571428571428568e+00,],
    [   2.7500000000000000e+00,   3.8571428571428568e+00,],
    [   4.5000000000000000e+00,   3.8571428571428568e+00,],
    [   6.2500000000000000e+00,   3.8571428571428568e+00,],
    [   8.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.5833333333333333e+00,   4.3333333333333330e+00,],
    [   2.1666666666666665e+00,   4.0952380952380949e+00,],
    [   3.3333333333333330e+00,   4.3333333333333330e+00,],
    [   3.9166666666666665e+00,   4.0952380952380949e+00,],
    [   5.0833333333333339e+00,   4.3333333333333330e+00,],
    [   5.6666666666666661e+00,   4.0952380952380949e+00,],
    [   6.8333333333333339e+00,   4.3333333333333330e+00,],
    [   7.4166666666666661e+00,   4.0952380952380949e+00,],
    [   1.0000000000000000e+00,   4.5714285714285712e+00,],
    [   2.7500000000000000e+00,   4.5714285714285712e+00,],
    [   4.5000000000000000e+00,   4.5714285714285712e+00,],
    [   6.2500000000000000e+00,   4.5714285714285712e+00,],
    [   8.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.5833333333333333e+00,   5.0476190476190474e+00,],
    [   2.1666666666666665e+00,   4.8095238095238093e+00,],
    [   3.3333333333333330e+00,   5.0476190476190474e+00,],
    [   3.9166666666666665e+00,   4.8095238095238093e+00,],
    [   5.0833333333333339e+00,   5.0476190476190474e+00,],
    [   5.6666666666666661e+00,   4.8095238095238093e+00,],
    [   6.8333333333333339e+00,   5.0476190476190474e+00,],
    [   7.4166666666666661e+00,   4.8095238095238093e+00,],
    [   1.0000000000000000e+00,   5.2857142857142856e+00,],
    [   2.7500000000000000e+00,   5.2857142857142856e+00,],
    [   4.5000000000000000e+00,   5.2857142857142856e+00,],
    [   6.2500000000000000e+00,   5.2857142857142856e+00,],
    [   8.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.5833333333333333e+00,   5.7619047619047619e+00,],
    [   2.1666666666666665e+00,   5.5238095238095237e+00,],
    [   3.3333333333333330e+00,   5.7619047619047619e+00,],
    [   3.9166666666666665e+00,   5.5238095238095237e+00,],
    [   5.0833333333333339e+00,   5.7619047619047619e+00,],
    [   5.6666666666666661e+00,   5.5238095238095237e+00,],
    [   6.8333333333333339e+00,   5.7619047619047619e+00,],
    [   7.4166666666666661e+00,   5.5238095238095237e+00,],
    [   1.0000000000000000e+00,   6.0000000000000000e+00,],
    [   2.7500000000000000e+00,   6.0000000000000000e+00,],
    [   4.5000000000000000e+00,   6.0000000000000000e+00,],
    [   6.2500000000000000e+00,   6.0000000000000000e+00,],
    [   8.0000000000000000e+00,   6.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               5,
              96,
              92,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 5
    mesh_ez.curves[0].nelem = 4
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 8
    mesh_ez.curves[1].nelem = 7
    mesh_ez.curves[1].nodes = np.array([
               5,
              18,
              31,
              44,
              57,
              70,
              83,
              96,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           5,],
    [           2,          18,],
    [           3,          31,],
    [           4,          44,],
    [           5,          57,],
    [           6,          70,],
    [           7,          83,],
    ],
    [
    [           2,          18,],
    [           3,          31,],
    [           4,          44,],
    [           5,          57,],
    [           6,          70,],
    [           7,          83,],
    [           8,          96,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 5
    mesh_ez.curves[2].nelem = 4
    mesh_ez.curves[2].nodes = np.array([
              96,
              95,
              94,
              93,
              92,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          96,],
    [           2,          95,],
    [           3,          94,],
    [           4,          93,],
    ],
    [
    [           2,          95,],
    [           3,          94,],
    [           4,          93,],
    [           5,          92,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 8
    mesh_ez.curves[3].nelem = 7
    mesh_ez.curves[3].nodes = np.array([
              92,
              79,
              66,
              53,
              40,
              27,
              14,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,          92,],
    [           2,          79,],
    [           3,          66,],
    [           4,          53,],
    [           5,          40,],
    [           6,          27,],
    [           7,          14,],
    ],
    [
    [           2,          79,],
    [           3,          66,],
    [           4,          53,],
    [           5,          40,],
    [           6,          27,],
    [           7,          14,],
    [           8,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test10_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([7,5],'tria4',vertices=np.array([[1,1],[2,2],[2,4],[1,4]]),ratio=np.array([1,2,3,4]),factor=np.array([1.2,1.3,1.4,1.5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 118
    mesh_ez.elshape = 10
    mesh_ez.nelem = 70
    mesh_ez.elnumnod = 4
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           1,           2,           2,           3,           3,           4,           4,           5,           5,           6,           6,           7,           7,          23,          23,          24,          24,          25,          25,          26,          26,          27,          27,          28,          28,          29,          29,          45,          45,          46,          46,          47,          47,          48,          48,          49,          49,          50,          50,          51,          51,          67,          67,          68,          68,          69,          69,          70,          70,          71,          71,          72,          72,          73,          73,          89,          89,          90,          90,          91,          91,          92,          92,          93,          93,          94,          94,          95,          95,],
    [          24,           2,          25,           3,          26,           4,          27,           5,          28,           6,          29,           7,          30,           8,          46,          24,          47,          25,          48,          26,          49,          27,          50,          28,          51,          29,          52,          30,          68,          46,          69,          47,          70,          48,          71,          49,          72,          50,          73,          51,          74,          52,          90,          68,          91,          69,          92,          70,          93,          71,          94,          72,          95,          73,          96,          74,         112,          90,         113,          91,         114,          92,         115,          93,         116,          94,         117,          95,         118,          96,],
    [          23,          24,          24,          25,          25,          26,          26,          27,          27,          28,          28,          29,          29,          30,          45,          46,          46,          47,          47,          48,          48,          49,          49,          50,          50,          51,          51,          52,          67,          68,          68,          69,          69,          70,          70,          71,          71,          72,          72,          73,          73,          74,          89,          90,          90,          91,          91,          92,          92,          93,          93,          94,          94,          95,          95,          96,         111,         112,         112,         113,         113,         114,         114,         115,         115,         116,         116,         117,         117,         118,],
    [           9,          10,          11,          12,          13,          14,          15,          16,          17,          18,          19,          20,          21,          22,          31,          32,          33,          34,          35,          36,          37,          38,          39,          40,          41,          42,          43,          44,          53,          54,          55,          56,          57,          58,          59,          60,          61,          62,          63,          64,          65,          66,          75,          76,          77,          78,          79,          80,          81,          82,          83,          84,          85,          86,          87,          88,          97,          98,          99,         100,         101,         102,         103,         104,         105,         106,         107,         108,         109,         110,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.1301696150208107e+00,   1.1301696150208107e+00,],
    [   1.2643553949435233e+00,   1.2643553949435233e+00,],
    [   1.4026812517925893e+00,   1.4026812517925893e+00,],
    [   1.5452749206899121e+00,   1.5452749206899121e+00,],
    [   1.6922680778100991e+00,   1.6922680778100991e+00,],
    [   1.8437964619750271e+00,   1.8437964619750271e+00,],
    [   2.0000000000000000e+00,   2.0000000000000000e+00,],
    [   1.0431170541551902e+00,   1.1970267546334785e+00,],
    [   1.0865069258287936e+00,   1.1645153307002103e+00,],
    [   1.1741304936586781e+00,   1.3298258495508259e+00,],
    [   1.2191319044846625e+00,   1.2978904547364485e+00,],
    [   1.3093234880773466e+00,   1.4660292305876406e+00,],
    [   1.3559270041783256e+00,   1.4350342467824677e+00,],
    [   1.4488656922285357e+00,   1.6057280406509500e+00,],
    [   1.4970425438588850e+00,   1.5760573797201185e+00,],
    [   1.5929375385374480e+00,   1.7490169828255369e+00,],
    [   1.6426364114427634e+00,   1.7210746241005013e+00,],
    [   1.7417312487320809e+00,   1.8959945301320154e+00,],
    [   1.7928746574476642e+00,   1.8702050811538156e+00,],
    [   1.8954519648442973e+00,   2.0467631433448319e+00,],
    [   1.9479321539916754e+00,   2.0235724339107417e+00,],
    [   1.0000000000000000e+00,   1.2274881516587675e+00,],
    [   1.1293511624655703e+00,   1.3599349301916182e+00,],
    [   1.2628707034896531e+00,   1.4954300998801142e+00,],
    [   1.4007443657988636e+00,   1.6340434612132482e+00,],
    [   1.5431714590941539e+00,   1.7758472923440236e+00,],
    [   1.6903662358282783e+00,   1.9209164299964210e+00,],
    [   1.8425594325578654e+00,   2.0693283296177079e+00,],
    [   2.0000000000000000e+00,   2.2211630967256801e+00,],
    [   1.0427178077678667e+00,   1.4993971400628472e+00,],
    [   1.0858348619230567e+00,   1.4297327716102581e+00,],
    [   1.1727507483620720e+00,   1.6295007486416844e+00,],
    [   1.2176565084240896e+00,   1.5624351227155115e+00,],
    [   1.3072174818803912e+00,   1.7620975970352912e+00,],
    [   1.3538830507076640e+00,   1.6979422965616839e+00,],
    [   1.4463552258699601e+00,   1.8972204261758470e+00,],
    [   1.4947343512898530e+00,   1.8363077500482197e+00,],
    [   1.5904220728407430e+00,   2.0349001591699976e+00,],
    [   1.6404484084579889e+00,   1.9775855200329615e+00,],
    [   1.7396994019777257e+00,   2.1751651305462576e+00,],
    [   1.7912833693465027e+00,   2.1218299082222467e+00,],
    [   1.8944946240704099e+00,   2.3180401100041874e+00,],
    [   1.9475198108526217e+00,   2.2690950572749311e+00,],
    [   1.0000000000000000e+00,   1.5687203791469193e+00,],
    [   1.1281534233035999e+00,   1.6964148983086509e+00,],
    [   1.2607476593170457e+00,   1.8262951975738617e+00,],
    [   1.3980340828344757e+00,   1.9583720732015595e+00,],
    [   1.5402872289765410e+00,   2.0926518320838925e+00,],
    [   1.6878075304515345e+00,   2.2291350173481472e+00,],
    [   1.8409244396533642e+00,   2.3678148229296681e+00,],
    [   2.0000000000000000e+00,   2.5086751224690644e+00,],
    [   1.0421317244192367e+00,   1.9494031064712656e+00,],
    [   1.0848495321871034e+00,   1.8212924671829769e+00,],
    [   1.1707483589628933e+00,   2.0660891871555780e+00,],
    [   1.2155325209826717e+00,   1.9445104463095206e+00,],
    [   1.3042211246661413e+00,   2.1845411497834117e+00,],
    [   1.3510003255018432e+00,   2.0697143805579570e+00,],
    [   1.4428543452726421e+00,   2.3047253170159139e+00,],
    [   1.4915436768134867e+00,   2.1968911903563950e+00,],
    [   1.5869819956557514e+00,   2.4265954588473484e+00,],
    [   1.6374812662631149e+00,   2.3260186871466857e+00,],
    [   1.7369713755966822e+00,   2.5500899287131071e+00,],
    [   1.7891631756940471e+00,   2.4570633512316213e+00,],
    [   1.8932273322102020e+00,   2.6751281468814492e+00,],
    [   1.9469748132177882e+00,   2.5899775898180453e+00,],
    [   1.0000000000000000e+00,   2.0805687203791470e+00,],
    [   1.1263951732577102e+00,   2.1908688507683465e+00,],
    [   1.2576964803273696e+00,   2.3027086235313163e+00,],
    [   1.3942192343540083e+00,   2.4160331015230092e+00,],
    [   1.5363097186294428e+00,   2.5307713566106256e+00,],
    [   1.6843490393612699e+00,   2.6468329818184886e+00,],
    [   1.8387575569772423e+00,   2.7641038247594487e+00,],
    [   2.0000000000000000e+00,   2.8824407559354643e+00,],
    [   1.0412686632368577e+00,   2.6200897096797062e+00,],
    [   1.0834003876560945e+00,   2.4008870785613903e+00,],
    [   1.1678297486668212e+00,   2.7050579695542911e+00,],
    [   1.2124599122057533e+00,   2.4992381174341354e+00,],
    [   1.2999331426149334e+00,   2.7912667207948423e+00,],
    [   1.3469101930555425e+00,   2.5989728436586264e+00,],
    [   1.4379408446115547e+00,   2.8786242146462953e+00,],
    [   1.4871057959929526e+00,   2.7000101656076971e+00,],
    [   1.5822488289099281e+00,   2.9670158856943907e+00,],
    [   1.6334356970318828e+00,   2.8022477599120030e+00,],
    [   1.7332911296819713e+00,   3.0562998546089024e+00,],
    [   1.7863275376394068e+00,   2.9055576762856434e+00,],
    [   1.8915445245189835e+00,   3.1463014959130269e+00,],
    [   1.9462525189924142e+00,   3.0097809905575943e+00,],
    [   1.0000000000000000e+00,   2.8483412322274879e+00,],
    [   1.1238059897105730e+00,   2.9201021073481748e+00,],
    [   1.2532880830321802e+00,   2.9929210590175077e+00,],
    [   1.3888148644852496e+00,   3.0666952358449073e+00,],
    [   1.5307884349954062e+00,   3.1412975467433544e+00,],
    [   1.6796483331049354e+00,   3.2165720853553825e+00,],
    [   1.8358760165797086e+00,   3.2923286389330619e+00,],
    [   2.0000000000000000e+00,   3.3683360794417840e+00,],
    [   1.0399934344490063e+00,   3.6212313873465551e+00,],
    [   1.0812620976858640e+00,   3.2612217271323978e+00,],
    [   1.1635558249330213e+00,   3.6450088697863205e+00,],
    [   1.2079917514947420e+00,   3.3093412542956271e+00,],
    [   1.2937570283790021e+00,   3.6692529846243649e+00,],
    [   1.3410682559602614e+00,   3.3582449777720389e+00,],
    [   1.4309937048707497e+00,   3.6939236796122596e+00,],
    [   1.4808892430814338e+00,   3.4078498004069422e+00,],
    [   1.5756894795826994e+00,   3.7189708352195736e+00,],
    [   1.6278841140297962e+00,   3.4580528914014437e+00,],
    [   1.7282971608027187e+00,   3.7443325160008931e+00,],
    [   1.7825173083329395e+00,   3.5087281151373211e+00,],
    [   1.8893011972979608e+00,   3.7699329142024141e+00,],
    [   1.9452920055265697e+00,   3.5597217853743350e+00,],
    [   1.0000000000000000e+00,   4.0000000000000000e+00,],
    [   1.1199803033470188e+00,   4.0000000000000000e+00,],
    [   1.2468811817414724e+00,   4.0000000000000000e+00,],
    [   1.3811018203633538e+00,   4.0000000000000000e+00,],
    [   1.5230644297636453e+00,   4.0000000000000000e+00,],
    [   1.6732155739890473e+00,   4.0000000000000000e+00,],
    [   1.8320275753141737e+00,   4.0000000000000000e+00,],
    [   2.0000000000000000e+00,   4.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               8,
             118,
             111,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 8
    mesh_ez.curves[0].nelem = 7
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    [           6,           6,],
    [           7,           7,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    [           6,           6,],
    [           7,           7,],
    [           8,           8,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 6
    mesh_ez.curves[1].nelem = 5
    mesh_ez.curves[1].nodes = np.array([
               8,
              30,
              52,
              74,
              96,
             118,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           8,],
    [           2,          30,],
    [           3,          52,],
    [           4,          74,],
    [           5,          96,],
    ],
    [
    [           2,          30,],
    [           3,          52,],
    [           4,          74,],
    [           5,          96,],
    [           6,         118,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 8
    mesh_ez.curves[2].nelem = 7
    mesh_ez.curves[2].nodes = np.array([
             118,
             117,
             116,
             115,
             114,
             113,
             112,
             111,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,         118,],
    [           2,         117,],
    [           3,         116,],
    [           4,         115,],
    [           5,         114,],
    [           6,         113,],
    [           7,         112,],
    ],
    [
    [           2,         117,],
    [           3,         116,],
    [           4,         115,],
    [           5,         114,],
    [           6,         113,],
    [           7,         112,],
    [           8,         111,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 6
    mesh_ez.curves[3].nelem = 5
    mesh_ez.curves[3].nodes = np.array([
             111,
              89,
              67,
              45,
              23,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,         111,],
    [           2,          89,],
    [           3,          67,],
    [           4,          45,],
    [           5,          23,],
    ],
    [
    [           2,          89,],
    [           3,          67,],
    [           4,          45,],
    [           5,          23,],
    [           6,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test11_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([4,7],'tria6',origin=np.array([1,1]),length=np.array([7,5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 135
    mesh_ez.elshape = 4
    mesh_ez.nelem = 56
    mesh_ez.elnumnod = 6
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           1,           3,           3,           5,           5,           7,           7,          19,          19,          21,          21,          23,          23,          25,          25,          37,          37,          39,          39,          41,          41,          43,          43,          55,          55,          57,          57,          59,          59,          61,          61,          73,          73,          75,          75,          77,          77,          79,          79,          91,          91,          93,          93,          95,          95,          97,          97,         109,         109,         111,         111,         113,         113,         115,         115,],
    [          11,           2,          13,           4,          15,           6,          17,           8,          29,          20,          31,          22,          33,          24,          35,          26,          47,          38,          49,          40,          51,          42,          53,          44,          65,          56,          67,          58,          69,          60,          71,          62,          83,          74,          85,          76,          87,          78,          89,          80,         101,          92,         103,          94,         105,          96,         107,          98,         119,         110,         121,         112,         123,         114,         125,         116,],
    [          21,           3,          23,           5,          25,           7,          27,           9,          39,          21,          41,          23,          43,          25,          45,          27,          57,          39,          59,          41,          61,          43,          63,          45,          75,          57,          77,          59,          79,          61,          81,          63,          93,          75,          95,          77,          97,          79,          99,          81,         111,          93,         113,          95,         115,          97,         117,          99,         129,         111,         131,         113,         133,         115,         135,         117,],
    [          20,          12,          22,          14,          24,          16,          26,          18,          38,          30,          40,          32,          42,          34,          44,          36,          56,          48,          58,          50,          60,          52,          62,          54,          74,          66,          76,          68,          78,          70,          80,          72,          92,          84,          94,          86,          96,          88,          98,          90,         110,         102,         112,         104,         114,         106,         116,         108,         128,         120,         130,         122,         132,         124,         134,         126,],
    [          19,          21,          21,          23,          23,          25,          25,          27,          37,          39,          39,          41,          41,          43,          43,          45,          55,          57,          57,          59,          59,          61,          61,          63,          73,          75,          75,          77,          77,          79,          79,          81,          91,          93,          93,          95,          95,          97,          97,          99,         109,         111,         111,         113,         113,         115,         115,         117,         127,         129,         129,         131,         131,         133,         133,         135,],
    [          10,          11,          12,          13,          14,          15,          16,          17,          28,          29,          30,          31,          32,          33,          34,          35,          46,          47,          48,          49,          50,          51,          52,          53,          64,          65,          66,          67,          68,          69,          70,          71,          82,          83,          84,          85,          86,          87,          88,          89,         100,         101,         102,         103,         104,         105,         106,         107,         118,         119,         120,         121,         122,         123,         124,         125,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.8750000000000000e+00,   1.0000000000000000e+00,],
    [   2.7500000000000000e+00,   1.0000000000000000e+00,],
    [   3.6250000000000000e+00,   1.0000000000000000e+00,],
    [   4.5000000000000000e+00,   1.0000000000000000e+00,],
    [   5.3750000000000000e+00,   1.0000000000000000e+00,],
    [   6.2500000000000000e+00,   1.0000000000000000e+00,],
    [   7.1250000000000000e+00,   1.0000000000000000e+00,],
    [   8.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.0000000000000000e+00,   1.3571428571428572e+00,],
    [   1.8750000000000000e+00,   1.3571428571428572e+00,],
    [   2.7500000000000000e+00,   1.3571428571428572e+00,],
    [   3.6250000000000000e+00,   1.3571428571428572e+00,],
    [   4.5000000000000000e+00,   1.3571428571428572e+00,],
    [   5.3750000000000000e+00,   1.3571428571428572e+00,],
    [   6.2500000000000000e+00,   1.3571428571428572e+00,],
    [   7.1250000000000000e+00,   1.3571428571428572e+00,],
    [   8.0000000000000000e+00,   1.3571428571428572e+00,],
    [   1.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.8750000000000000e+00,   1.7142857142857142e+00,],
    [   2.7500000000000000e+00,   1.7142857142857142e+00,],
    [   3.6250000000000000e+00,   1.7142857142857142e+00,],
    [   4.5000000000000000e+00,   1.7142857142857142e+00,],
    [   5.3750000000000000e+00,   1.7142857142857142e+00,],
    [   6.2500000000000000e+00,   1.7142857142857142e+00,],
    [   7.1250000000000000e+00,   1.7142857142857142e+00,],
    [   8.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.0000000000000000e+00,   2.0714285714285712e+00,],
    [   1.8750000000000000e+00,   2.0714285714285712e+00,],
    [   2.7500000000000000e+00,   2.0714285714285712e+00,],
    [   3.6250000000000000e+00,   2.0714285714285712e+00,],
    [   4.5000000000000000e+00,   2.0714285714285712e+00,],
    [   5.3750000000000000e+00,   2.0714285714285712e+00,],
    [   6.2500000000000000e+00,   2.0714285714285712e+00,],
    [   7.1250000000000000e+00,   2.0714285714285712e+00,],
    [   8.0000000000000000e+00,   2.0714285714285712e+00,],
    [   1.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.8750000000000000e+00,   2.4285714285714284e+00,],
    [   2.7500000000000000e+00,   2.4285714285714284e+00,],
    [   3.6250000000000000e+00,   2.4285714285714284e+00,],
    [   4.5000000000000000e+00,   2.4285714285714284e+00,],
    [   5.3750000000000000e+00,   2.4285714285714284e+00,],
    [   6.2500000000000000e+00,   2.4285714285714284e+00,],
    [   7.1250000000000000e+00,   2.4285714285714284e+00,],
    [   8.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.0000000000000000e+00,   2.7857142857142856e+00,],
    [   1.8750000000000000e+00,   2.7857142857142856e+00,],
    [   2.7500000000000000e+00,   2.7857142857142856e+00,],
    [   3.6250000000000000e+00,   2.7857142857142856e+00,],
    [   4.5000000000000000e+00,   2.7857142857142856e+00,],
    [   5.3750000000000000e+00,   2.7857142857142856e+00,],
    [   6.2500000000000000e+00,   2.7857142857142856e+00,],
    [   7.1250000000000000e+00,   2.7857142857142856e+00,],
    [   8.0000000000000000e+00,   2.7857142857142856e+00,],
    [   1.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.8750000000000000e+00,   3.1428571428571428e+00,],
    [   2.7500000000000000e+00,   3.1428571428571428e+00,],
    [   3.6250000000000000e+00,   3.1428571428571428e+00,],
    [   4.5000000000000000e+00,   3.1428571428571428e+00,],
    [   5.3750000000000000e+00,   3.1428571428571428e+00,],
    [   6.2500000000000000e+00,   3.1428571428571428e+00,],
    [   7.1250000000000000e+00,   3.1428571428571428e+00,],
    [   8.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.0000000000000000e+00,   3.5000000000000000e+00,],
    [   1.8750000000000000e+00,   3.5000000000000000e+00,],
    [   2.7500000000000000e+00,   3.5000000000000000e+00,],
    [   3.6250000000000000e+00,   3.5000000000000000e+00,],
    [   4.5000000000000000e+00,   3.5000000000000000e+00,],
    [   5.3750000000000000e+00,   3.5000000000000000e+00,],
    [   6.2500000000000000e+00,   3.5000000000000000e+00,],
    [   7.1250000000000000e+00,   3.5000000000000000e+00,],
    [   8.0000000000000000e+00,   3.5000000000000000e+00,],
    [   1.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.8750000000000000e+00,   3.8571428571428568e+00,],
    [   2.7500000000000000e+00,   3.8571428571428568e+00,],
    [   3.6250000000000000e+00,   3.8571428571428568e+00,],
    [   4.5000000000000000e+00,   3.8571428571428568e+00,],
    [   5.3750000000000000e+00,   3.8571428571428568e+00,],
    [   6.2500000000000000e+00,   3.8571428571428568e+00,],
    [   7.1250000000000000e+00,   3.8571428571428568e+00,],
    [   8.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.0000000000000000e+00,   4.2142857142857135e+00,],
    [   1.8750000000000000e+00,   4.2142857142857135e+00,],
    [   2.7500000000000000e+00,   4.2142857142857135e+00,],
    [   3.6250000000000000e+00,   4.2142857142857135e+00,],
    [   4.5000000000000000e+00,   4.2142857142857135e+00,],
    [   5.3750000000000000e+00,   4.2142857142857135e+00,],
    [   6.2500000000000000e+00,   4.2142857142857135e+00,],
    [   7.1250000000000000e+00,   4.2142857142857135e+00,],
    [   8.0000000000000000e+00,   4.2142857142857135e+00,],
    [   1.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.8750000000000000e+00,   4.5714285714285712e+00,],
    [   2.7500000000000000e+00,   4.5714285714285712e+00,],
    [   3.6250000000000000e+00,   4.5714285714285712e+00,],
    [   4.5000000000000000e+00,   4.5714285714285712e+00,],
    [   5.3750000000000000e+00,   4.5714285714285712e+00,],
    [   6.2500000000000000e+00,   4.5714285714285712e+00,],
    [   7.1250000000000000e+00,   4.5714285714285712e+00,],
    [   8.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.0000000000000000e+00,   4.9285714285714288e+00,],
    [   1.8750000000000000e+00,   4.9285714285714288e+00,],
    [   2.7500000000000000e+00,   4.9285714285714288e+00,],
    [   3.6250000000000000e+00,   4.9285714285714288e+00,],
    [   4.5000000000000000e+00,   4.9285714285714288e+00,],
    [   5.3750000000000000e+00,   4.9285714285714288e+00,],
    [   6.2500000000000000e+00,   4.9285714285714288e+00,],
    [   7.1250000000000000e+00,   4.9285714285714288e+00,],
    [   8.0000000000000000e+00,   4.9285714285714288e+00,],
    [   1.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.8750000000000000e+00,   5.2857142857142856e+00,],
    [   2.7500000000000000e+00,   5.2857142857142856e+00,],
    [   3.6250000000000000e+00,   5.2857142857142856e+00,],
    [   4.5000000000000000e+00,   5.2857142857142856e+00,],
    [   5.3750000000000000e+00,   5.2857142857142856e+00,],
    [   6.2500000000000000e+00,   5.2857142857142856e+00,],
    [   7.1250000000000000e+00,   5.2857142857142856e+00,],
    [   8.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.0000000000000000e+00,   5.6428571428571423e+00,],
    [   1.8750000000000000e+00,   5.6428571428571423e+00,],
    [   2.7500000000000000e+00,   5.6428571428571423e+00,],
    [   3.6250000000000000e+00,   5.6428571428571423e+00,],
    [   4.5000000000000000e+00,   5.6428571428571423e+00,],
    [   5.3750000000000000e+00,   5.6428571428571423e+00,],
    [   6.2500000000000000e+00,   5.6428571428571423e+00,],
    [   7.1250000000000000e+00,   5.6428571428571423e+00,],
    [   8.0000000000000000e+00,   5.6428571428571423e+00,],
    [   1.0000000000000000e+00,   6.0000000000000000e+00,],
    [   1.8750000000000000e+00,   6.0000000000000000e+00,],
    [   2.7500000000000000e+00,   6.0000000000000000e+00,],
    [   3.6250000000000000e+00,   6.0000000000000000e+00,],
    [   4.5000000000000000e+00,   6.0000000000000000e+00,],
    [   5.3750000000000000e+00,   6.0000000000000000e+00,],
    [   6.2500000000000000e+00,   6.0000000000000000e+00,],
    [   7.1250000000000000e+00,   6.0000000000000000e+00,],
    [   8.0000000000000000e+00,   6.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               9,
             135,
             127,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 2
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 3
    mesh_ez.curves[0].nnodes = 9
    mesh_ez.curves[0].nelem = 4
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
               9,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    ],
    [
    [           2,           2,],
    [           4,           4,],
    [           6,           6,],
    [           8,           8,],
    ],
    [
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    [           9,           9,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 2
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 3
    mesh_ez.curves[1].nnodes = 15
    mesh_ez.curves[1].nelem = 7
    mesh_ez.curves[1].nodes = np.array([
               9,
              18,
              27,
              36,
              45,
              54,
              63,
              72,
              81,
              90,
              99,
             108,
             117,
             126,
             135,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           9,],
    [           3,          27,],
    [           5,          45,],
    [           7,          63,],
    [           9,          81,],
    [          11,          99,],
    [          13,         117,],
    ],
    [
    [           2,          18,],
    [           4,          36,],
    [           6,          54,],
    [           8,          72,],
    [          10,          90,],
    [          12,         108,],
    [          14,         126,],
    ],
    [
    [           3,          27,],
    [           5,          45,],
    [           7,          63,],
    [           9,          81,],
    [          11,          99,],
    [          13,         117,],
    [          15,         135,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 2
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 3
    mesh_ez.curves[2].nnodes = 9
    mesh_ez.curves[2].nelem = 4
    mesh_ez.curves[2].nodes = np.array([
             135,
             134,
             133,
             132,
             131,
             130,
             129,
             128,
             127,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,         135,],
    [           3,         133,],
    [           5,         131,],
    [           7,         129,],
    ],
    [
    [           2,         134,],
    [           4,         132,],
    [           6,         130,],
    [           8,         128,],
    ],
    [
    [           3,         133,],
    [           5,         131,],
    [           7,         129,],
    [           9,         127,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 2
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 3
    mesh_ez.curves[3].nnodes = 15
    mesh_ez.curves[3].nelem = 7
    mesh_ez.curves[3].nodes = np.array([
             127,
             118,
             109,
             100,
              91,
              82,
              73,
              64,
              55,
              46,
              37,
              28,
              19,
              10,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,         127,],
    [           3,         109,],
    [           5,          91,],
    [           7,          73,],
    [           9,          55,],
    [          11,          37,],
    [          13,          19,],
    ],
    [
    [           2,         118,],
    [           4,         100,],
    [           6,          82,],
    [           8,          64,],
    [          10,          46,],
    [          12,          28,],
    [          14,          10,],
    ],
    [
    [           3,         109,],
    [           5,          91,],
    [           7,          73,],
    [           9,          55,],
    [          11,          37,],
    [          13,          19,],
    [          15,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test12_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([7,5],'tria6',vertices=np.array([[1,1],[2,2],[2,4],[1,4]]),ratio=np.array([1,2,3,4]),factor=np.array([1.2,1.3,1.4,1.5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 165
    mesh_ez.elshape = 4
    mesh_ez.nelem = 70
    mesh_ez.elnumnod = 6
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           1,           3,           3,           5,           5,           7,           7,           9,           9,          11,          11,          13,          13,          31,          31,          33,          33,          35,          35,          37,          37,          39,          39,          41,          41,          43,          43,          61,          61,          63,          63,          65,          65,          67,          67,          69,          69,          71,          71,          73,          73,          91,          91,          93,          93,          95,          95,          97,          97,          99,          99,         101,         101,         103,         103,         121,         121,         123,         123,         125,         125,         127,         127,         129,         129,         131,         131,         133,         133,],
    [          17,           2,          19,           4,          21,           6,          23,           8,          25,          10,          27,          12,          29,          14,          47,          32,          49,          34,          51,          36,          53,          38,          55,          40,          57,          42,          59,          44,          77,          62,          79,          64,          81,          66,          83,          68,          85,          70,          87,          72,          89,          74,         107,          92,         109,          94,         111,          96,         113,          98,         115,         100,         117,         102,         119,         104,         137,         122,         139,         124,         141,         126,         143,         128,         145,         130,         147,         132,         149,         134,],
    [          33,           3,          35,           5,          37,           7,          39,           9,          41,          11,          43,          13,          45,          15,          63,          33,          65,          35,          67,          37,          69,          39,          71,          41,          73,          43,          75,          45,          93,          63,          95,          65,          97,          67,          99,          69,         101,          71,         103,          73,         105,          75,         123,          93,         125,          95,         127,          97,         129,          99,         131,         101,         133,         103,         135,         105,         153,         123,         155,         125,         157,         127,         159,         129,         161,         131,         163,         133,         165,         135,],
    [          32,          18,          34,          20,          36,          22,          38,          24,          40,          26,          42,          28,          44,          30,          62,          48,          64,          50,          66,          52,          68,          54,          70,          56,          72,          58,          74,          60,          92,          78,          94,          80,          96,          82,          98,          84,         100,          86,         102,          88,         104,          90,         122,         108,         124,         110,         126,         112,         128,         114,         130,         116,         132,         118,         134,         120,         152,         138,         154,         140,         156,         142,         158,         144,         160,         146,         162,         148,         164,         150,],
    [          31,          33,          33,          35,          35,          37,          37,          39,          39,          41,          41,          43,          43,          45,          61,          63,          63,          65,          65,          67,          67,          69,          69,          71,          71,          73,          73,          75,          91,          93,          93,          95,          95,          97,          97,          99,          99,         101,         101,         103,         103,         105,         121,         123,         123,         125,         125,         127,         127,         129,         129,         131,         131,         133,         133,         135,         151,         153,         153,         155,         155,         157,         157,         159,         159,         161,         161,         163,         163,         165,],
    [          16,          17,          18,          19,          20,          21,          22,          23,          24,          25,          26,          27,          28,          29,          46,          47,          48,          49,          50,          51,          52,          53,          54,          55,          56,          57,          58,          59,          76,          77,          78,          79,          80,          81,          82,          83,          84,          85,          86,          87,          88,          89,         106,         107,         108,         109,         110,         111,         112,         113,         114,         115,         116,         117,         118,         119,         136,         137,         138,         139,         140,         141,         142,         143,         144,         145,         146,         147,         148,         149,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.0650848075104054e+00,   1.0650848075104054e+00,],
    [   1.1301696150208107e+00,   1.1301696150208107e+00,],
    [   1.1972625049821670e+00,   1.1972625049821670e+00,],
    [   1.2643553949435233e+00,   1.2643553949435233e+00,],
    [   1.3335183233680565e+00,   1.3335183233680565e+00,],
    [   1.4026812517925893e+00,   1.4026812517925893e+00,],
    [   1.4739780862412508e+00,   1.4739780862412508e+00,],
    [   1.5452749206899121e+00,   1.5452749206899121e+00,],
    [   1.6187714992500057e+00,   1.6187714992500057e+00,],
    [   1.6922680778100991e+00,   1.6922680778100991e+00,],
    [   1.7680322698925632e+00,   1.7680322698925632e+00,],
    [   1.8437964619750271e+00,   1.8437964619750271e+00,],
    [   1.9218982309875137e+00,   1.9218982309875137e+00,],
    [   2.0000000000000000e+00,   2.0000000000000000e+00,],
    [   1.0000000000000000e+00,   1.1137440758293837e+00,],
    [   1.0648859011690885e+00,   1.1794790798717723e+00,],
    [   1.1297603163023737e+00,   1.2450561735452141e+00,],
    [   1.1966908049400136e+00,   1.3125583230656679e+00,],
    [   1.2636128238840754e+00,   1.3798962811667514e+00,],
    [   1.3326650967576441e+00,   1.4492145834861985e+00,],
    [   1.4017124457986654e+00,   1.5183622548867033e+00,],
    [   1.4729680054957834e+00,   1.5895476303741114e+00,],
    [   1.5442227841527687e+00,   1.6605557794231001e+00,],
    [   1.6177677959668992e+00,   1.7336611914391273e+00,],
    [   1.6913168421134936e+00,   1.8065826283093758e+00,],
    [   1.7672425278378472e+00,   1.8816632237362021e+00,],
    [   1.8431778208078162e+00,   1.9565529453079187e+00,],
    [   1.9215808938017138e+00,   2.0336662063856084e+00,],
    [   2.0000000000000000e+00,   2.1105815483628403e+00,],
    [   1.0000000000000000e+00,   1.2274881516587675e+00,],
    [   1.0646870300379685e+00,   1.2938686296166415e+00,],
    [   1.1293511624655703e+00,   1.3599349301916182e+00,],
    [   1.1961193795727101e+00,   1.4278459723825612e+00,],
    [   1.2628707034896531e+00,   1.4954300998801142e+00,],
    [   1.3318124487536054e+00,   1.5649068732683071e+00,],
    [   1.4007443657988636e+00,   1.6340434612132482e+00,],
    [   1.4719586927336645e+00,   1.7051223947086955e+00,],
    [   1.5431714590941539e+00,   1.7758472923440236e+00,],
    [   1.6167648118125895e+00,   1.8485661215250759e+00,],
    [   1.6903662358282783e+00,   1.9209164299964210e+00,],
    [   1.7664532085070586e+00,   1.9953142323622552e+00,],
    [   1.8425594325578654e+00,   2.0693283296177079e+00,],
    [   1.9212636214971941e+00,   2.1454455465484976e+00,],
    [   2.0000000000000000e+00,   2.2211630967256801e+00,],
    [   1.0000000000000000e+00,   1.3981042654028433e+00,],
    [   1.0643924159235918e+00,   1.4633575390787499e+00,],
    [   1.1287522013635338e+00,   1.5281654270558149e+00,],
    [   1.1952926017380181e+00,   1.5947357115746477e+00,],
    [   1.2618089032954991e+00,   1.6608415050972143e+00,],
    [   1.3306058636022047e+00,   1.7287506767104306e+00,],
    [   1.3993887859650718e+00,   1.7961751230355429e+00,],
    [   1.4705599411100823e+00,   1.8654450085776959e+00,],
    [   1.5417288639235207e+00,   1.9342086620805063e+00,],
    [   1.6154019079760131e+00,   2.0048608394989751e+00,],
    [   1.6890865177177712e+00,   2.0749838349999474e+00,],
    [   1.7654003340651236e+00,   2.1470393729794228e+00,],
    [   1.8417417918173400e+00,   2.2185411323774402e+00,],
    [   1.9208477337747856e+00,   2.2920202539030958e+00,],
    [   2.0000000000000000e+00,   2.3649191095973725e+00,],
    [   1.0000000000000000e+00,   1.5687203791469193e+00,],
    [   1.0640978468409994e+00,   1.6328546082707016e+00,],
    [   1.1281534233035999e+00,   1.6964148983086509e+00,],
    [   1.1944661668065006e+00,   1.7616550117634029e+00,],
    [   1.2607476593170457e+00,   1.8262951975738617e+00,],
    [   1.3293999846621647e+00,   1.8926475644954757e+00,],
    [   1.3980340828344757e+00,   1.9583720732015595e+00,],
    [   1.4691621073189611e+00,   2.0258409636061936e+00,],
    [   1.5402872289765410e+00,   2.0926518320838925e+00,],
    [   1.6140398469114030e+00,   2.1612388084655825e+00,],
    [   1.6878075304515345e+00,   2.2291350173481472e+00,],
    [   1.7643479460971583e+00,   2.2988381771771453e+00,],
    [   1.8409244396533642e+00,   2.3678148229296681e+00,],
    [   1.9204319194716422e+00,   2.4386278563328889e+00,],
    [   2.0000000000000000e+00,   2.5086751224690644e+00,],
    [   1.0000000000000000e+00,   1.8246445497630330e+00,],
    [   1.0636607379893075e+00,   1.8844328137690050e+00,],
    [   1.1272742254787798e+00,   1.9435864976870647e+00,],
    [   1.1932655394539369e+00,   2.0043278271448921e+00,],
    [   1.2592218532752941e+00,   2.0644025304763565e+00,],
    [   1.3276843167560592e+00,   2.1260890501723546e+00,],
    [   1.3961263243421063e+00,   2.1870740881945467e+00,],
    [   1.4672138521963705e+00,   2.2496933528580731e+00,],
    [   1.5382981151235962e+00,   2.3115730269673733e+00,],
    [   1.6121795739166713e+00,   2.3751069404125413e+00,],
    [   1.6860780173129388e+00,   2.4378593681040113e+00,],
    [   1.7629390685337021e+00,   2.5022828552903804e+00,],
    [   1.8398408946966618e+00,   2.5658785326851596e+00,],
    [   1.9198861110777750e+00,   2.6311579061144914e+00,],
    [   2.0000000000000000e+00,   2.6955579392022644e+00,],
    [   1.0000000000000000e+00,   2.0805687203791470e+00,],
    [   1.0632236653473000e+00,   2.1360651751601383e+00,],
    [   1.1263951732577102e+00,   2.1908688507683465e+00,],
    [   1.1920651819367003e+00,   2.2471544668768830e+00,],
    [   1.2576964803273696e+00,   2.3027086235313163e+00,],
    [   1.3259691929486799e+00,   2.3597578443509568e+00,],
    [   1.3942192343540083e+00,   2.4160331015230092e+00,],
    [   1.4652662897331532e+00,   2.4738126902857669e+00,],
    [   1.5363097186294428e+00,   2.5307713566106256e+00,],
    [   1.6103199241995492e+00,   2.5892387172190907e+00,],
    [   1.6843490393612699e+00,   2.6468329818184886e+00,],
    [   1.7615305437088882e+00,   2.7059341055059214e+00,],
    [   1.8387575569772423e+00,   2.7641038247594487e+00,],
    [   1.9193403549040560e+00,   2.8237707734090156e+00,],
    [   2.0000000000000000e+00,   2.8824407559354643e+00,],
    [   1.0000000000000000e+00,   2.4644549763033172e+00,],
    [   1.0625740791399743e+00,   2.5101848366972970e+00,],
    [   1.1251006670057428e+00,   2.5552969093077267e+00,],
    [   1.1903142827412778e+00,   2.6017266662451544e+00,],
    [   1.2554925312604195e+00,   2.6474977272279538e+00,],
    [   1.3235153704426641e+00,   2.6945909772273855e+00,],
    [   1.3915174271526043e+00,   2.7409803226519402e+00,],
    [   1.4625351181710817e+00,   2.7886909120186996e+00,],
    [   1.5335494739835407e+00,   2.8356474011620030e+00,],
    [   1.6077655021730399e+00,   2.8839174660200770e+00,],
    [   1.6819989763658094e+00,   2.9313774246391162e+00,],
    [   1.7596368786679712e+00,   2.9801350193843685e+00,],
    [   1.8373168966985811e+00,   3.0280197001099163e+00,],
    [   1.9186227842200143e+00,   3.0771759200998918e+00,],
    [   2.0000000000000000e+00,   3.1253884176886242e+00,],
    [   1.0000000000000000e+00,   2.8483412322274879e+00,],
    [   1.0619244500028389e+00,   2.8844948884190229e+00,],
    [   1.1238059897105730e+00,   2.9201021073481748e+00,],
    [   1.1885630695760248e+00,   2.9568058430068094e+00,],
    [   1.2532880830321802e+00,   2.9929210590175077e+00,],
    [   1.3210609269877747e+00,   3.0301257902657337e+00,],
    [   1.3888148644852496e+00,   3.0666952358449073e+00,],
    [   1.4598031717826423e+00,   3.1043401250885148e+00,],
    [   1.5307884349954062e+00,   3.1412975467433544e+00,],
    [   1.6052103972232494e+00,   3.1793077856820000e+00,],
    [   1.6796483331049354e+00,   3.2165720853553825e+00,],
    [   1.7577428353342963e+00,   3.2548562359887980e+00,],
    [   1.8358760165797086e+00,   3.2923286389330619e+00,],
    [   1.9179051587645457e+00,   3.3307754354028178e+00,],
    [   2.0000000000000000e+00,   3.3683360794417840e+00,],
    [   1.0000000000000000e+00,   3.4241706161137442e+00,],
    [   1.0609574684708118e+00,   3.4419671711393609e+00,],
    [   1.1218938095069411e+00,   3.4595048124218017e+00,],
    [   1.1859981132707356e+00,   3.4776814523311175e+00,],
    [   1.2500865360191109e+00,   3.4955740334064189e+00,],
    [   1.3175285610726126e+00,   3.5141010488759417e+00,],
    [   1.3849611721385795e+00,   3.5323160030566254e+00,],
    [   1.4559460220886185e+00,   3.5511561558281546e+00,],
    [   1.5269293489210973e+00,   3.5696530000701965e+00,],
    [   1.6016776796271031e+00,   3.5887602650324775e+00,],
    [   1.6764340373825064e+00,   3.6074892799806677e+00,],
    [   1.7551835470376820e+00,   3.6268073779692500e+00,],
    [   1.8339525662150407e+00,   3.6457080672931301e+00,],
    [   1.9169596625283059e+00,   3.6651687508379776e+00,],
    [   2.0000000000000000e+00,   3.6841680397208920e+00,],
    [   1.0000000000000000e+00,   4.0000000000000000e+00,],
    [   1.0599901516735093e+00,   4.0000000000000000e+00,],
    [   1.1199803033470188e+00,   4.0000000000000000e+00,],
    [   1.1834307425442456e+00,   4.0000000000000000e+00,],
    [   1.2468811817414724e+00,   4.0000000000000000e+00,],
    [   1.3139915010524132e+00,   4.0000000000000000e+00,],
    [   1.3811018203633538e+00,   4.0000000000000000e+00,],
    [   1.4520831250634996e+00,   4.0000000000000000e+00,],
    [   1.5230644297636453e+00,   4.0000000000000000e+00,],
    [   1.5981400018763463e+00,   4.0000000000000000e+00,],
    [   1.6732155739890473e+00,   4.0000000000000000e+00,],
    [   1.7526215746516105e+00,   4.0000000000000000e+00,],
    [   1.8320275753141737e+00,   4.0000000000000000e+00,],
    [   1.9160137876570869e+00,   4.0000000000000000e+00,],
    [   2.0000000000000000e+00,   4.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
              15,
             165,
             151,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 2
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 3
    mesh_ez.curves[0].nnodes = 15
    mesh_ez.curves[0].nelem = 7
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
               9,
              10,
              11,
              12,
              13,
              14,
              15,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    [           9,           9,],
    [          11,          11,],
    [          13,          13,],
    ],
    [
    [           2,           2,],
    [           4,           4,],
    [           6,           6,],
    [           8,           8,],
    [          10,          10,],
    [          12,          12,],
    [          14,          14,],
    ],
    [
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    [           9,           9,],
    [          11,          11,],
    [          13,          13,],
    [          15,          15,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 2
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 3
    mesh_ez.curves[1].nnodes = 11
    mesh_ez.curves[1].nelem = 5
    mesh_ez.curves[1].nodes = np.array([
              15,
              30,
              45,
              60,
              75,
              90,
             105,
             120,
             135,
             150,
             165,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,          15,],
    [           3,          45,],
    [           5,          75,],
    [           7,         105,],
    [           9,         135,],
    ],
    [
    [           2,          30,],
    [           4,          60,],
    [           6,          90,],
    [           8,         120,],
    [          10,         150,],
    ],
    [
    [           3,          45,],
    [           5,          75,],
    [           7,         105,],
    [           9,         135,],
    [          11,         165,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 2
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 3
    mesh_ez.curves[2].nnodes = 15
    mesh_ez.curves[2].nelem = 7
    mesh_ez.curves[2].nodes = np.array([
             165,
             164,
             163,
             162,
             161,
             160,
             159,
             158,
             157,
             156,
             155,
             154,
             153,
             152,
             151,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,         165,],
    [           3,         163,],
    [           5,         161,],
    [           7,         159,],
    [           9,         157,],
    [          11,         155,],
    [          13,         153,],
    ],
    [
    [           2,         164,],
    [           4,         162,],
    [           6,         160,],
    [           8,         158,],
    [          10,         156,],
    [          12,         154,],
    [          14,         152,],
    ],
    [
    [           3,         163,],
    [           5,         161,],
    [           7,         159,],
    [           9,         157,],
    [          11,         155,],
    [          13,         153,],
    [          15,         151,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 2
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 3
    mesh_ez.curves[3].nnodes = 11
    mesh_ez.curves[3].nelem = 5
    mesh_ez.curves[3].nodes = np.array([
             151,
             136,
             121,
             106,
              91,
              76,
              61,
              46,
              31,
              16,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,         151,],
    [           3,         121,],
    [           5,          91,],
    [           7,          61,],
    [           9,          31,],
    ],
    [
    [           2,         136,],
    [           4,         106,],
    [           6,          76,],
    [           8,          46,],
    [          10,          16,],
    ],
    [
    [           3,         121,],
    [           5,          91,],
    [           7,          61,],
    [           9,          31,],
    [          11,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test13_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([4,7],'tria7',origin=np.array([1,1]),length=np.array([7,5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 191
    mesh_ez.elshape = 7
    mesh_ez.nelem = 56
    mesh_ez.elnumnod = 7
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           1,           3,           3,           5,           5,           7,           7,          27,          27,          29,          29,          31,          31,          33,          33,          53,          53,          55,          55,          57,          57,          59,          59,          79,          79,          81,          81,          83,          83,          85,          85,         105,         105,         107,         107,         109,         109,         111,         111,         131,         131,         133,         133,         135,         135,         137,         137,         157,         157,         159,         159,         161,         161,         163,         163,],
    [          19,           2,          21,           4,          23,           6,          25,           8,          45,          28,          47,          30,          49,          32,          51,          34,          71,          54,          73,          56,          75,          58,          77,          60,          97,          80,          99,          82,         101,          84,         103,          86,         123,         106,         125,         108,         127,         110,         129,         112,         149,         132,         151,         134,         153,         136,         155,         138,         175,         158,         177,         160,         179,         162,         181,         164,],
    [          29,           3,          31,           5,          33,           7,          35,           9,          55,          29,          57,          31,          59,          33,          61,          35,          81,          55,          83,          57,          85,          59,          87,          61,         107,          81,         109,          83,         111,          85,         113,          87,         133,         107,         135,         109,         137,         111,         139,         113,         159,         133,         161,         135,         163,         137,         165,         139,         185,         159,         187,         161,         189,         163,         191,         165,],
    [          28,          20,          30,          22,          32,          24,          34,          26,          54,          46,          56,          48,          58,          50,          60,          52,          80,          72,          82,          74,          84,          76,          86,          78,         106,          98,         108,         100,         110,         102,         112,         104,         132,         124,         134,         126,         136,         128,         138,         130,         158,         150,         160,         152,         162,         154,         164,         156,         184,         176,         186,         178,         188,         180,         190,         182,],
    [          27,          29,          29,          31,          31,          33,          33,          35,          53,          55,          55,          57,          57,          59,          59,          61,          79,          81,          81,          83,          83,          85,          85,          87,         105,         107,         107,         109,         109,         111,         111,         113,         131,         133,         133,         135,         135,         137,         137,         139,         157,         159,         159,         161,         161,         163,         163,         165,         183,         185,         185,         187,         187,         189,         189,         191,],
    [          18,          19,          20,          21,          22,          23,          24,          25,          44,          45,          46,          47,          48,          49,          50,          51,          70,          71,          72,          73,          74,          75,          76,          77,          96,          97,          98,          99,         100,         101,         102,         103,         122,         123,         124,         125,         126,         127,         128,         129,         148,         149,         150,         151,         152,         153,         154,         155,         174,         175,         176,         177,         178,         179,         180,         181,],
    [          10,          11,          12,          13,          14,          15,          16,          17,          36,          37,          38,          39,          40,          41,          42,          43,          62,          63,          64,          65,          66,          67,          68,          69,          88,          89,          90,          91,          92,          93,          94,          95,         114,         115,         116,         117,         118,         119,         120,         121,         140,         141,         142,         143,         144,         145,         146,         147,         166,         167,         168,         169,         170,         171,         172,         173,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.8750000000000000e+00,   1.0000000000000000e+00,],
    [   2.7500000000000000e+00,   1.0000000000000000e+00,],
    [   3.6250000000000000e+00,   1.0000000000000000e+00,],
    [   4.5000000000000000e+00,   1.0000000000000000e+00,],
    [   5.3750000000000000e+00,   1.0000000000000000e+00,],
    [   6.2500000000000000e+00,   1.0000000000000000e+00,],
    [   7.1250000000000000e+00,   1.0000000000000000e+00,],
    [   8.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.5833333333333333e+00,   1.4761904761904763e+00,],
    [   2.1666666666666665e+00,   1.2380952380952381e+00,],
    [   3.3333333333333330e+00,   1.4761904761904763e+00,],
    [   3.9166666666666665e+00,   1.2380952380952381e+00,],
    [   5.0833333333333339e+00,   1.4761904761904763e+00,],
    [   5.6666666666666661e+00,   1.2380952380952381e+00,],
    [   6.8333333333333339e+00,   1.4761904761904763e+00,],
    [   7.4166666666666661e+00,   1.2380952380952381e+00,],
    [   1.0000000000000000e+00,   1.3571428571428572e+00,],
    [   1.8750000000000000e+00,   1.3571428571428572e+00,],
    [   2.7500000000000000e+00,   1.3571428571428572e+00,],
    [   3.6250000000000000e+00,   1.3571428571428572e+00,],
    [   4.5000000000000000e+00,   1.3571428571428572e+00,],
    [   5.3750000000000000e+00,   1.3571428571428572e+00,],
    [   6.2500000000000000e+00,   1.3571428571428572e+00,],
    [   7.1250000000000000e+00,   1.3571428571428572e+00,],
    [   8.0000000000000000e+00,   1.3571428571428572e+00,],
    [   1.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.8750000000000000e+00,   1.7142857142857142e+00,],
    [   2.7500000000000000e+00,   1.7142857142857142e+00,],
    [   3.6250000000000000e+00,   1.7142857142857142e+00,],
    [   4.5000000000000000e+00,   1.7142857142857142e+00,],
    [   5.3750000000000000e+00,   1.7142857142857142e+00,],
    [   6.2500000000000000e+00,   1.7142857142857142e+00,],
    [   7.1250000000000000e+00,   1.7142857142857142e+00,],
    [   8.0000000000000000e+00,   1.7142857142857142e+00,],
    [   1.5833333333333333e+00,   2.1904761904761907e+00,],
    [   2.1666666666666665e+00,   1.9523809523809523e+00,],
    [   3.3333333333333330e+00,   2.1904761904761907e+00,],
    [   3.9166666666666665e+00,   1.9523809523809523e+00,],
    [   5.0833333333333339e+00,   2.1904761904761907e+00,],
    [   5.6666666666666661e+00,   1.9523809523809523e+00,],
    [   6.8333333333333339e+00,   2.1904761904761907e+00,],
    [   7.4166666666666661e+00,   1.9523809523809523e+00,],
    [   1.0000000000000000e+00,   2.0714285714285712e+00,],
    [   1.8750000000000000e+00,   2.0714285714285712e+00,],
    [   2.7500000000000000e+00,   2.0714285714285712e+00,],
    [   3.6250000000000000e+00,   2.0714285714285712e+00,],
    [   4.5000000000000000e+00,   2.0714285714285712e+00,],
    [   5.3750000000000000e+00,   2.0714285714285712e+00,],
    [   6.2500000000000000e+00,   2.0714285714285712e+00,],
    [   7.1250000000000000e+00,   2.0714285714285712e+00,],
    [   8.0000000000000000e+00,   2.0714285714285712e+00,],
    [   1.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.8750000000000000e+00,   2.4285714285714284e+00,],
    [   2.7500000000000000e+00,   2.4285714285714284e+00,],
    [   3.6250000000000000e+00,   2.4285714285714284e+00,],
    [   4.5000000000000000e+00,   2.4285714285714284e+00,],
    [   5.3750000000000000e+00,   2.4285714285714284e+00,],
    [   6.2500000000000000e+00,   2.4285714285714284e+00,],
    [   7.1250000000000000e+00,   2.4285714285714284e+00,],
    [   8.0000000000000000e+00,   2.4285714285714284e+00,],
    [   1.5833333333333333e+00,   2.9047619047619047e+00,],
    [   2.1666666666666665e+00,   2.6666666666666665e+00,],
    [   3.3333333333333330e+00,   2.9047619047619047e+00,],
    [   3.9166666666666665e+00,   2.6666666666666665e+00,],
    [   5.0833333333333339e+00,   2.9047619047619047e+00,],
    [   5.6666666666666661e+00,   2.6666666666666665e+00,],
    [   6.8333333333333339e+00,   2.9047619047619047e+00,],
    [   7.4166666666666661e+00,   2.6666666666666665e+00,],
    [   1.0000000000000000e+00,   2.7857142857142856e+00,],
    [   1.8750000000000000e+00,   2.7857142857142856e+00,],
    [   2.7500000000000000e+00,   2.7857142857142856e+00,],
    [   3.6250000000000000e+00,   2.7857142857142856e+00,],
    [   4.5000000000000000e+00,   2.7857142857142856e+00,],
    [   5.3750000000000000e+00,   2.7857142857142856e+00,],
    [   6.2500000000000000e+00,   2.7857142857142856e+00,],
    [   7.1250000000000000e+00,   2.7857142857142856e+00,],
    [   8.0000000000000000e+00,   2.7857142857142856e+00,],
    [   1.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.8750000000000000e+00,   3.1428571428571428e+00,],
    [   2.7500000000000000e+00,   3.1428571428571428e+00,],
    [   3.6250000000000000e+00,   3.1428571428571428e+00,],
    [   4.5000000000000000e+00,   3.1428571428571428e+00,],
    [   5.3750000000000000e+00,   3.1428571428571428e+00,],
    [   6.2500000000000000e+00,   3.1428571428571428e+00,],
    [   7.1250000000000000e+00,   3.1428571428571428e+00,],
    [   8.0000000000000000e+00,   3.1428571428571428e+00,],
    [   1.5833333333333333e+00,   3.6190476190476186e+00,],
    [   2.1666666666666665e+00,   3.3809523809523809e+00,],
    [   3.3333333333333330e+00,   3.6190476190476186e+00,],
    [   3.9166666666666665e+00,   3.3809523809523809e+00,],
    [   5.0833333333333339e+00,   3.6190476190476186e+00,],
    [   5.6666666666666661e+00,   3.3809523809523809e+00,],
    [   6.8333333333333339e+00,   3.6190476190476186e+00,],
    [   7.4166666666666661e+00,   3.3809523809523809e+00,],
    [   1.0000000000000000e+00,   3.5000000000000000e+00,],
    [   1.8750000000000000e+00,   3.5000000000000000e+00,],
    [   2.7500000000000000e+00,   3.5000000000000000e+00,],
    [   3.6250000000000000e+00,   3.5000000000000000e+00,],
    [   4.5000000000000000e+00,   3.5000000000000000e+00,],
    [   5.3750000000000000e+00,   3.5000000000000000e+00,],
    [   6.2500000000000000e+00,   3.5000000000000000e+00,],
    [   7.1250000000000000e+00,   3.5000000000000000e+00,],
    [   8.0000000000000000e+00,   3.5000000000000000e+00,],
    [   1.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.8750000000000000e+00,   3.8571428571428568e+00,],
    [   2.7500000000000000e+00,   3.8571428571428568e+00,],
    [   3.6250000000000000e+00,   3.8571428571428568e+00,],
    [   4.5000000000000000e+00,   3.8571428571428568e+00,],
    [   5.3750000000000000e+00,   3.8571428571428568e+00,],
    [   6.2500000000000000e+00,   3.8571428571428568e+00,],
    [   7.1250000000000000e+00,   3.8571428571428568e+00,],
    [   8.0000000000000000e+00,   3.8571428571428568e+00,],
    [   1.5833333333333333e+00,   4.3333333333333330e+00,],
    [   2.1666666666666665e+00,   4.0952380952380949e+00,],
    [   3.3333333333333330e+00,   4.3333333333333330e+00,],
    [   3.9166666666666665e+00,   4.0952380952380949e+00,],
    [   5.0833333333333339e+00,   4.3333333333333330e+00,],
    [   5.6666666666666661e+00,   4.0952380952380949e+00,],
    [   6.8333333333333339e+00,   4.3333333333333330e+00,],
    [   7.4166666666666661e+00,   4.0952380952380949e+00,],
    [   1.0000000000000000e+00,   4.2142857142857135e+00,],
    [   1.8750000000000000e+00,   4.2142857142857135e+00,],
    [   2.7500000000000000e+00,   4.2142857142857135e+00,],
    [   3.6250000000000000e+00,   4.2142857142857135e+00,],
    [   4.5000000000000000e+00,   4.2142857142857135e+00,],
    [   5.3750000000000000e+00,   4.2142857142857135e+00,],
    [   6.2500000000000000e+00,   4.2142857142857135e+00,],
    [   7.1250000000000000e+00,   4.2142857142857135e+00,],
    [   8.0000000000000000e+00,   4.2142857142857135e+00,],
    [   1.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.8750000000000000e+00,   4.5714285714285712e+00,],
    [   2.7500000000000000e+00,   4.5714285714285712e+00,],
    [   3.6250000000000000e+00,   4.5714285714285712e+00,],
    [   4.5000000000000000e+00,   4.5714285714285712e+00,],
    [   5.3750000000000000e+00,   4.5714285714285712e+00,],
    [   6.2500000000000000e+00,   4.5714285714285712e+00,],
    [   7.1250000000000000e+00,   4.5714285714285712e+00,],
    [   8.0000000000000000e+00,   4.5714285714285712e+00,],
    [   1.5833333333333333e+00,   5.0476190476190474e+00,],
    [   2.1666666666666665e+00,   4.8095238095238093e+00,],
    [   3.3333333333333330e+00,   5.0476190476190474e+00,],
    [   3.9166666666666665e+00,   4.8095238095238093e+00,],
    [   5.0833333333333339e+00,   5.0476190476190474e+00,],
    [   5.6666666666666661e+00,   4.8095238095238093e+00,],
    [   6.8333333333333339e+00,   5.0476190476190474e+00,],
    [   7.4166666666666661e+00,   4.8095238095238093e+00,],
    [   1.0000000000000000e+00,   4.9285714285714279e+00,],
    [   1.8750000000000000e+00,   4.9285714285714279e+00,],
    [   2.7500000000000000e+00,   4.9285714285714279e+00,],
    [   3.6250000000000000e+00,   4.9285714285714279e+00,],
    [   4.5000000000000000e+00,   4.9285714285714279e+00,],
    [   5.3750000000000000e+00,   4.9285714285714279e+00,],
    [   6.2500000000000000e+00,   4.9285714285714279e+00,],
    [   7.1250000000000000e+00,   4.9285714285714279e+00,],
    [   8.0000000000000000e+00,   4.9285714285714279e+00,],
    [   1.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.8750000000000000e+00,   5.2857142857142856e+00,],
    [   2.7500000000000000e+00,   5.2857142857142856e+00,],
    [   3.6250000000000000e+00,   5.2857142857142856e+00,],
    [   4.5000000000000000e+00,   5.2857142857142856e+00,],
    [   5.3750000000000000e+00,   5.2857142857142856e+00,],
    [   6.2500000000000000e+00,   5.2857142857142856e+00,],
    [   7.1250000000000000e+00,   5.2857142857142856e+00,],
    [   8.0000000000000000e+00,   5.2857142857142856e+00,],
    [   1.5833333333333333e+00,   5.7619047619047619e+00,],
    [   2.1666666666666665e+00,   5.5238095238095237e+00,],
    [   3.3333333333333330e+00,   5.7619047619047619e+00,],
    [   3.9166666666666665e+00,   5.5238095238095237e+00,],
    [   5.0833333333333339e+00,   5.7619047619047619e+00,],
    [   5.6666666666666661e+00,   5.5238095238095237e+00,],
    [   6.8333333333333339e+00,   5.7619047619047619e+00,],
    [   7.4166666666666661e+00,   5.5238095238095237e+00,],
    [   1.0000000000000000e+00,   5.6428571428571423e+00,],
    [   1.8750000000000000e+00,   5.6428571428571423e+00,],
    [   2.7500000000000000e+00,   5.6428571428571423e+00,],
    [   3.6250000000000000e+00,   5.6428571428571423e+00,],
    [   4.5000000000000000e+00,   5.6428571428571423e+00,],
    [   5.3750000000000000e+00,   5.6428571428571423e+00,],
    [   6.2500000000000000e+00,   5.6428571428571423e+00,],
    [   7.1250000000000000e+00,   5.6428571428571423e+00,],
    [   8.0000000000000000e+00,   5.6428571428571423e+00,],
    [   1.0000000000000000e+00,   6.0000000000000000e+00,],
    [   1.8750000000000000e+00,   6.0000000000000000e+00,],
    [   2.7500000000000000e+00,   6.0000000000000000e+00,],
    [   3.6250000000000000e+00,   6.0000000000000000e+00,],
    [   4.5000000000000000e+00,   6.0000000000000000e+00,],
    [   5.3750000000000000e+00,   6.0000000000000000e+00,],
    [   6.2500000000000000e+00,   6.0000000000000000e+00,],
    [   7.1250000000000000e+00,   6.0000000000000000e+00,],
    [   8.0000000000000000e+00,   6.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
               9,
             191,
             183,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 2
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 3
    mesh_ez.curves[0].nnodes = 9
    mesh_ez.curves[0].nelem = 4
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
               9,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    ],
    [
    [           2,           2,],
    [           4,           4,],
    [           6,           6,],
    [           8,           8,],
    ],
    [
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    [           9,           9,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 2
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 3
    mesh_ez.curves[1].nnodes = 15
    mesh_ez.curves[1].nelem = 7
    mesh_ez.curves[1].nodes = np.array([
               9,
              26,
              35,
              52,
              61,
              78,
              87,
             104,
             113,
             130,
             139,
             156,
             165,
             182,
             191,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,           9,],
    [           3,          35,],
    [           5,          61,],
    [           7,          87,],
    [           9,         113,],
    [          11,         139,],
    [          13,         165,],
    ],
    [
    [           2,          26,],
    [           4,          52,],
    [           6,          78,],
    [           8,         104,],
    [          10,         130,],
    [          12,         156,],
    [          14,         182,],
    ],
    [
    [           3,          35,],
    [           5,          61,],
    [           7,          87,],
    [           9,         113,],
    [          11,         139,],
    [          13,         165,],
    [          15,         191,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 2
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 3
    mesh_ez.curves[2].nnodes = 9
    mesh_ez.curves[2].nelem = 4
    mesh_ez.curves[2].nodes = np.array([
             191,
             190,
             189,
             188,
             187,
             186,
             185,
             184,
             183,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,         191,],
    [           3,         189,],
    [           5,         187,],
    [           7,         185,],
    ],
    [
    [           2,         190,],
    [           4,         188,],
    [           6,         186,],
    [           8,         184,],
    ],
    [
    [           3,         189,],
    [           5,         187,],
    [           7,         185,],
    [           9,         183,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 2
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 3
    mesh_ez.curves[3].nnodes = 15
    mesh_ez.curves[3].nelem = 7
    mesh_ez.curves[3].nodes = np.array([
             183,
             174,
             157,
             148,
             131,
             122,
             105,
              96,
              79,
              70,
              53,
              44,
              27,
              18,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,         183,],
    [           3,         157,],
    [           5,         131,],
    [           7,         105,],
    [           9,          79,],
    [          11,          53,],
    [          13,          27,],
    ],
    [
    [           2,         174,],
    [           4,         148,],
    [           6,         122,],
    [           8,          96,],
    [          10,          70,],
    [          12,          44,],
    [          14,          18,],
    ],
    [
    [           3,         157,],
    [           5,         131,],
    [           7,         105,],
    [           9,          79,],
    [          11,          53,],
    [          13,          27,],
    [          15,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test14_quadrilaterial2d(self):
    mesh_py = quadrilateral2d([7,5],'tria7',vertices=np.array([[1,1],[2,2],[2,4],[1,4]]),ratio=np.array([1,2,3,4]),factor=np.array([1.2,1.3,1.4,1.5]))
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 235
    mesh_ez.elshape = 7
    mesh_ez.nelem = 70
    mesh_ez.elnumnod = 7
    mesh_ez.npoints = 4
    mesh_ez.ncurves = 4
    mesh_ez.topology = np.array([
    [           1,           1,           3,           3,           5,           5,           7,           7,           9,           9,          11,          11,          13,          13,          45,          45,          47,          47,          49,          49,          51,          51,          53,          53,          55,          55,          57,          57,          89,          89,          91,          91,          93,          93,          95,          95,          97,          97,          99,          99,         101,         101,         133,         133,         135,         135,         137,         137,         139,         139,         141,         141,         143,         143,         145,         145,         177,         177,         179,         179,         181,         181,         183,         183,         185,         185,         187,         187,         189,         189,],
    [          31,           2,          33,           4,          35,           6,          37,           8,          39,          10,          41,          12,          43,          14,          75,          46,          77,          48,          79,          50,          81,          52,          83,          54,          85,          56,          87,          58,         119,          90,         121,          92,         123,          94,         125,          96,         127,          98,         129,         100,         131,         102,         163,         134,         165,         136,         167,         138,         169,         140,         171,         142,         173,         144,         175,         146,         207,         178,         209,         180,         211,         182,         213,         184,         215,         186,         217,         188,         219,         190,],
    [          47,           3,          49,           5,          51,           7,          53,           9,          55,          11,          57,          13,          59,          15,          91,          47,          93,          49,          95,          51,          97,          53,          99,          55,         101,          57,         103,          59,         135,          91,         137,          93,         139,          95,         141,          97,         143,          99,         145,         101,         147,         103,         179,         135,         181,         137,         183,         139,         185,         141,         187,         143,         189,         145,         191,         147,         223,         179,         225,         181,         227,         183,         229,         185,         231,         187,         233,         189,         235,         191,],
    [          46,          32,          48,          34,          50,          36,          52,          38,          54,          40,          56,          42,          58,          44,          90,          76,          92,          78,          94,          80,          96,          82,          98,          84,         100,          86,         102,          88,         134,         120,         136,         122,         138,         124,         140,         126,         142,         128,         144,         130,         146,         132,         178,         164,         180,         166,         182,         168,         184,         170,         186,         172,         188,         174,         190,         176,         222,         208,         224,         210,         226,         212,         228,         214,         230,         216,         232,         218,         234,         220,],
    [          45,          47,          47,          49,          49,          51,          51,          53,          53,          55,          55,          57,          57,          59,          89,          91,          91,          93,          93,          95,          95,          97,          97,          99,          99,         101,         101,         103,         133,         135,         135,         137,         137,         139,         139,         141,         141,         143,         143,         145,         145,         147,         177,         179,         179,         181,         181,         183,         183,         185,         185,         187,         187,         189,         189,         191,         221,         223,         223,         225,         225,         227,         227,         229,         229,         231,         231,         233,         233,         235,],
    [          30,          31,          32,          33,          34,          35,          36,          37,          38,          39,          40,          41,          42,          43,          74,          75,          76,          77,          78,          79,          80,          81,          82,          83,          84,          85,          86,          87,         118,         119,         120,         121,         122,         123,         124,         125,         126,         127,         128,         129,         130,         131,         162,         163,         164,         165,         166,         167,         168,         169,         170,         171,         172,         173,         174,         175,         206,         207,         208,         209,         210,         211,         212,         213,         214,         215,         216,         217,         218,         219,],
    [          16,          17,          18,          19,          20,          21,          22,          23,          24,          25,          26,          27,          28,          29,          60,          61,          62,          63,          64,          65,          66,          67,          68,          69,          70,          71,          72,          73,         104,         105,         106,         107,         108,         109,         110,         111,         112,         113,         114,         115,         116,         117,         148,         149,         150,         151,         152,         153,         154,         155,         156,         157,         158,         159,         160,         161,         192,         193,         194,         195,         196,         197,         198,         199,         200,         201,         202,         203,         204,         205,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [   1.0000000000000000e+00,   1.0000000000000000e+00,],
    [   1.0650848075104054e+00,   1.0650848075104054e+00,],
    [   1.1301696150208107e+00,   1.1301696150208107e+00,],
    [   1.1972625049821670e+00,   1.1972625049821670e+00,],
    [   1.2643553949435233e+00,   1.2643553949435233e+00,],
    [   1.3335183233680565e+00,   1.3335183233680565e+00,],
    [   1.4026812517925893e+00,   1.4026812517925893e+00,],
    [   1.4739780862412508e+00,   1.4739780862412508e+00,],
    [   1.5452749206899121e+00,   1.5452749206899121e+00,],
    [   1.6187714992500057e+00,   1.6187714992500057e+00,],
    [   1.6922680778100991e+00,   1.6922680778100991e+00,],
    [   1.7680322698925632e+00,   1.7680322698925632e+00,],
    [   1.8437964619750271e+00,   1.8437964619750271e+00,],
    [   1.9218982309875137e+00,   1.9218982309875137e+00,],
    [   2.0000000000000000e+00,   2.0000000000000000e+00,],
    [   1.0431170541551902e+00,   1.1970267546334785e+00,],
    [   1.0865069258287936e+00,   1.1645153307002103e+00,],
    [   1.1741304936586781e+00,   1.3298258495508259e+00,],
    [   1.2191319044846625e+00,   1.2978904547364485e+00,],
    [   1.3093234880773466e+00,   1.4660292305876406e+00,],
    [   1.3559270041783256e+00,   1.4350342467824677e+00,],
    [   1.4488656922285357e+00,   1.6057280406509500e+00,],
    [   1.4970425438588850e+00,   1.5760573797201185e+00,],
    [   1.5929375385374480e+00,   1.7490169828255369e+00,],
    [   1.6426364114427634e+00,   1.7210746241005013e+00,],
    [   1.7417312487320809e+00,   1.8959945301320154e+00,],
    [   1.7928746574476642e+00,   1.8702050811538156e+00,],
    [   1.8954519648442973e+00,   2.0467631433448319e+00,],
    [   1.9479321539916754e+00,   2.0235724339107417e+00,],
    [   1.0000000000000000e+00,   1.1137440758293837e+00,],
    [   1.0648859011690885e+00,   1.1794790798717723e+00,],
    [   1.1297603163023737e+00,   1.2450561735452141e+00,],
    [   1.1966908049400136e+00,   1.3125583230656679e+00,],
    [   1.2636128238840754e+00,   1.3798962811667514e+00,],
    [   1.3326650967576441e+00,   1.4492145834861985e+00,],
    [   1.4017124457986654e+00,   1.5183622548867033e+00,],
    [   1.4729680054957834e+00,   1.5895476303741114e+00,],
    [   1.5442227841527687e+00,   1.6605557794231001e+00,],
    [   1.6177677959668992e+00,   1.7336611914391273e+00,],
    [   1.6913168421134936e+00,   1.8065826283093758e+00,],
    [   1.7672425278378472e+00,   1.8816632237362021e+00,],
    [   1.8431778208078162e+00,   1.9565529453079187e+00,],
    [   1.9215808938017138e+00,   2.0336662063856084e+00,],
    [   2.0000000000000000e+00,   2.1105815483628403e+00,],
    [   1.0000000000000000e+00,   1.2274881516587675e+00,],
    [   1.0646870300379685e+00,   1.2938686296166415e+00,],
    [   1.1293511624655703e+00,   1.3599349301916182e+00,],
    [   1.1961193795727101e+00,   1.4278459723825612e+00,],
    [   1.2628707034896531e+00,   1.4954300998801142e+00,],
    [   1.3318124487536054e+00,   1.5649068732683071e+00,],
    [   1.4007443657988636e+00,   1.6340434612132482e+00,],
    [   1.4719586927336645e+00,   1.7051223947086955e+00,],
    [   1.5431714590941539e+00,   1.7758472923440236e+00,],
    [   1.6167648118125895e+00,   1.8485661215250759e+00,],
    [   1.6903662358282783e+00,   1.9209164299964210e+00,],
    [   1.7664532085070586e+00,   1.9953142323622552e+00,],
    [   1.8425594325578654e+00,   2.0693283296177079e+00,],
    [   1.9212636214971941e+00,   2.1454455465484976e+00,],
    [   2.0000000000000000e+00,   2.2211630967256801e+00,],
    [   1.0427178077678667e+00,   1.4993971400628472e+00,],
    [   1.0858348619230567e+00,   1.4297327716102581e+00,],
    [   1.1727507483620720e+00,   1.6295007486416844e+00,],
    [   1.2176565084240896e+00,   1.5624351227155115e+00,],
    [   1.3072174818803912e+00,   1.7620975970352912e+00,],
    [   1.3538830507076640e+00,   1.6979422965616839e+00,],
    [   1.4463552258699601e+00,   1.8972204261758470e+00,],
    [   1.4947343512898530e+00,   1.8363077500482197e+00,],
    [   1.5904220728407430e+00,   2.0349001591699976e+00,],
    [   1.6404484084579889e+00,   1.9775855200329615e+00,],
    [   1.7396994019777257e+00,   2.1751651305462576e+00,],
    [   1.7912833693465027e+00,   2.1218299082222467e+00,],
    [   1.8944946240704099e+00,   2.3180401100041874e+00,],
    [   1.9475198108526217e+00,   2.2690950572749311e+00,],
    [   1.0000000000000000e+00,   1.3981042654028433e+00,],
    [   1.0643924159235918e+00,   1.4633575390787499e+00,],
    [   1.1287522013635338e+00,   1.5281654270558149e+00,],
    [   1.1952926017380181e+00,   1.5947357115746477e+00,],
    [   1.2618089032954991e+00,   1.6608415050972143e+00,],
    [   1.3306058636022047e+00,   1.7287506767104306e+00,],
    [   1.3993887859650718e+00,   1.7961751230355429e+00,],
    [   1.4705599411100823e+00,   1.8654450085776959e+00,],
    [   1.5417288639235207e+00,   1.9342086620805063e+00,],
    [   1.6154019079760131e+00,   2.0048608394989751e+00,],
    [   1.6890865177177712e+00,   2.0749838349999474e+00,],
    [   1.7654003340651236e+00,   2.1470393729794228e+00,],
    [   1.8417417918173400e+00,   2.2185411323774402e+00,],
    [   1.9208477337747856e+00,   2.2920202539030958e+00,],
    [   2.0000000000000000e+00,   2.3649191095973725e+00,],
    [   1.0000000000000000e+00,   1.5687203791469193e+00,],
    [   1.0640978468409994e+00,   1.6328546082707016e+00,],
    [   1.1281534233035999e+00,   1.6964148983086509e+00,],
    [   1.1944661668065006e+00,   1.7616550117634029e+00,],
    [   1.2607476593170457e+00,   1.8262951975738617e+00,],
    [   1.3293999846621647e+00,   1.8926475644954757e+00,],
    [   1.3980340828344757e+00,   1.9583720732015595e+00,],
    [   1.4691621073189611e+00,   2.0258409636061936e+00,],
    [   1.5402872289765410e+00,   2.0926518320838925e+00,],
    [   1.6140398469114030e+00,   2.1612388084655825e+00,],
    [   1.6878075304515345e+00,   2.2291350173481472e+00,],
    [   1.7643479460971583e+00,   2.2988381771771453e+00,],
    [   1.8409244396533642e+00,   2.3678148229296681e+00,],
    [   1.9204319194716422e+00,   2.4386278563328889e+00,],
    [   2.0000000000000000e+00,   2.5086751224690644e+00,],
    [   1.0421317244192367e+00,   1.9494031064712656e+00,],
    [   1.0848495321871034e+00,   1.8212924671829769e+00,],
    [   1.1707483589628933e+00,   2.0660891871555780e+00,],
    [   1.2155325209826717e+00,   1.9445104463095206e+00,],
    [   1.3042211246661413e+00,   2.1845411497834117e+00,],
    [   1.3510003255018432e+00,   2.0697143805579570e+00,],
    [   1.4428543452726421e+00,   2.3047253170159139e+00,],
    [   1.4915436768134867e+00,   2.1968911903563950e+00,],
    [   1.5869819956557514e+00,   2.4265954588473484e+00,],
    [   1.6374812662631149e+00,   2.3260186871466857e+00,],
    [   1.7369713755966822e+00,   2.5500899287131071e+00,],
    [   1.7891631756940471e+00,   2.4570633512316213e+00,],
    [   1.8932273322102020e+00,   2.6751281468814492e+00,],
    [   1.9469748132177882e+00,   2.5899775898180453e+00,],
    [   1.0000000000000000e+00,   1.8246445497630330e+00,],
    [   1.0636607379893075e+00,   1.8844328137690050e+00,],
    [   1.1272742254787798e+00,   1.9435864976870647e+00,],
    [   1.1932655394539369e+00,   2.0043278271448921e+00,],
    [   1.2592218532752941e+00,   2.0644025304763565e+00,],
    [   1.3276843167560592e+00,   2.1260890501723546e+00,],
    [   1.3961263243421063e+00,   2.1870740881945467e+00,],
    [   1.4672138521963705e+00,   2.2496933528580731e+00,],
    [   1.5382981151235962e+00,   2.3115730269673733e+00,],
    [   1.6121795739166713e+00,   2.3751069404125413e+00,],
    [   1.6860780173129388e+00,   2.4378593681040113e+00,],
    [   1.7629390685337021e+00,   2.5022828552903804e+00,],
    [   1.8398408946966618e+00,   2.5658785326851596e+00,],
    [   1.9198861110777750e+00,   2.6311579061144914e+00,],
    [   2.0000000000000000e+00,   2.6955579392022644e+00,],
    [   1.0000000000000000e+00,   2.0805687203791470e+00,],
    [   1.0632236653473000e+00,   2.1360651751601383e+00,],
    [   1.1263951732577102e+00,   2.1908688507683465e+00,],
    [   1.1920651819367003e+00,   2.2471544668768830e+00,],
    [   1.2576964803273696e+00,   2.3027086235313163e+00,],
    [   1.3259691929486799e+00,   2.3597578443509568e+00,],
    [   1.3942192343540083e+00,   2.4160331015230092e+00,],
    [   1.4652662897331532e+00,   2.4738126902857669e+00,],
    [   1.5363097186294428e+00,   2.5307713566106256e+00,],
    [   1.6103199241995492e+00,   2.5892387172190907e+00,],
    [   1.6843490393612699e+00,   2.6468329818184886e+00,],
    [   1.7615305437088882e+00,   2.7059341055059214e+00,],
    [   1.8387575569772423e+00,   2.7641038247594487e+00,],
    [   1.9193403549040560e+00,   2.8237707734090156e+00,],
    [   2.0000000000000000e+00,   2.8824407559354643e+00,],
    [   1.0412686632368577e+00,   2.6200897096797062e+00,],
    [   1.0834003876560945e+00,   2.4008870785613903e+00,],
    [   1.1678297486668212e+00,   2.7050579695542911e+00,],
    [   1.2124599122057533e+00,   2.4992381174341354e+00,],
    [   1.2999331426149334e+00,   2.7912667207948423e+00,],
    [   1.3469101930555425e+00,   2.5989728436586264e+00,],
    [   1.4379408446115547e+00,   2.8786242146462953e+00,],
    [   1.4871057959929526e+00,   2.7000101656076971e+00,],
    [   1.5822488289099281e+00,   2.9670158856943907e+00,],
    [   1.6334356970318828e+00,   2.8022477599120030e+00,],
    [   1.7332911296819713e+00,   3.0562998546089024e+00,],
    [   1.7863275376394068e+00,   2.9055576762856434e+00,],
    [   1.8915445245189835e+00,   3.1463014959130269e+00,],
    [   1.9462525189924142e+00,   3.0097809905575943e+00,],
    [   1.0000000000000000e+00,   2.4644549763033172e+00,],
    [   1.0625740791399743e+00,   2.5101848366972970e+00,],
    [   1.1251006670057428e+00,   2.5552969093077267e+00,],
    [   1.1903142827412778e+00,   2.6017266662451544e+00,],
    [   1.2554925312604195e+00,   2.6474977272279538e+00,],
    [   1.3235153704426641e+00,   2.6945909772273855e+00,],
    [   1.3915174271526043e+00,   2.7409803226519402e+00,],
    [   1.4625351181710817e+00,   2.7886909120186996e+00,],
    [   1.5335494739835407e+00,   2.8356474011620030e+00,],
    [   1.6077655021730399e+00,   2.8839174660200770e+00,],
    [   1.6819989763658094e+00,   2.9313774246391162e+00,],
    [   1.7596368786679712e+00,   2.9801350193843685e+00,],
    [   1.8373168966985811e+00,   3.0280197001099163e+00,],
    [   1.9186227842200143e+00,   3.0771759200998918e+00,],
    [   2.0000000000000000e+00,   3.1253884176886242e+00,],
    [   1.0000000000000000e+00,   2.8483412322274879e+00,],
    [   1.0619244500028389e+00,   2.8844948884190229e+00,],
    [   1.1238059897105730e+00,   2.9201021073481748e+00,],
    [   1.1885630695760248e+00,   2.9568058430068094e+00,],
    [   1.2532880830321802e+00,   2.9929210590175077e+00,],
    [   1.3210609269877747e+00,   3.0301257902657337e+00,],
    [   1.3888148644852496e+00,   3.0666952358449073e+00,],
    [   1.4598031717826423e+00,   3.1043401250885148e+00,],
    [   1.5307884349954062e+00,   3.1412975467433544e+00,],
    [   1.6052103972232494e+00,   3.1793077856820000e+00,],
    [   1.6796483331049354e+00,   3.2165720853553825e+00,],
    [   1.7577428353342963e+00,   3.2548562359887980e+00,],
    [   1.8358760165797086e+00,   3.2923286389330619e+00,],
    [   1.9179051587645457e+00,   3.3307754354028178e+00,],
    [   2.0000000000000000e+00,   3.3683360794417840e+00,],
    [   1.0399934344490063e+00,   3.6212313873465551e+00,],
    [   1.0812620976858640e+00,   3.2612217271323978e+00,],
    [   1.1635558249330213e+00,   3.6450088697863205e+00,],
    [   1.2079917514947420e+00,   3.3093412542956271e+00,],
    [   1.2937570283790021e+00,   3.6692529846243649e+00,],
    [   1.3410682559602614e+00,   3.3582449777720389e+00,],
    [   1.4309937048707497e+00,   3.6939236796122596e+00,],
    [   1.4808892430814338e+00,   3.4078498004069422e+00,],
    [   1.5756894795826994e+00,   3.7189708352195736e+00,],
    [   1.6278841140297962e+00,   3.4580528914014437e+00,],
    [   1.7282971608027187e+00,   3.7443325160008931e+00,],
    [   1.7825173083329395e+00,   3.5087281151373211e+00,],
    [   1.8893011972979608e+00,   3.7699329142024141e+00,],
    [   1.9452920055265697e+00,   3.5597217853743350e+00,],
    [   1.0000000000000000e+00,   3.4241706161137442e+00,],
    [   1.0609574684708118e+00,   3.4419671711393609e+00,],
    [   1.1218938095069411e+00,   3.4595048124218017e+00,],
    [   1.1859981132707356e+00,   3.4776814523311175e+00,],
    [   1.2500865360191109e+00,   3.4955740334064189e+00,],
    [   1.3175285610726126e+00,   3.5141010488759417e+00,],
    [   1.3849611721385795e+00,   3.5323160030566254e+00,],
    [   1.4559460220886185e+00,   3.5511561558281546e+00,],
    [   1.5269293489210973e+00,   3.5696530000701965e+00,],
    [   1.6016776796271031e+00,   3.5887602650324775e+00,],
    [   1.6764340373825064e+00,   3.6074892799806677e+00,],
    [   1.7551835470376820e+00,   3.6268073779692500e+00,],
    [   1.8339525662150407e+00,   3.6457080672931301e+00,],
    [   1.9169596625283059e+00,   3.6651687508379776e+00,],
    [   2.0000000000000000e+00,   3.6841680397208920e+00,],
    [   1.0000000000000000e+00,   4.0000000000000000e+00,],
    [   1.0599901516735093e+00,   4.0000000000000000e+00,],
    [   1.1199803033470188e+00,   4.0000000000000000e+00,],
    [   1.1834307425442456e+00,   4.0000000000000000e+00,],
    [   1.2468811817414724e+00,   4.0000000000000000e+00,],
    [   1.3139915010524132e+00,   4.0000000000000000e+00,],
    [   1.3811018203633538e+00,   4.0000000000000000e+00,],
    [   1.4520831250634996e+00,   4.0000000000000000e+00,],
    [   1.5230644297636453e+00,   4.0000000000000000e+00,],
    [   1.5981400018763463e+00,   4.0000000000000000e+00,],
    [   1.6732155739890473e+00,   4.0000000000000000e+00,],
    [   1.7526215746516105e+00,   4.0000000000000000e+00,],
    [   1.8320275753141737e+00,   4.0000000000000000e+00,],
    [   1.9160137876570869e+00,   4.0000000000000000e+00,],
    [   2.0000000000000000e+00,   4.0000000000000000e+00,],
    ])
    mesh_ez.points = np.array([
               1,
              15,
             235,
             221,
    ],dtype=int)
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 2
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 3
    mesh_ez.curves[0].nnodes = 15
    mesh_ez.curves[0].nelem = 7
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               8,
               9,
              10,
              11,
              12,
              13,
              14,
              15,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    [           9,           9,],
    [          11,          11,],
    [          13,          13,],
    ],
    [
    [           2,           2,],
    [           4,           4,],
    [           6,           6,],
    [           8,           8,],
    [          10,          10,],
    [          12,          12,],
    [          14,          14,],
    ],
    [
    [           3,           3,],
    [           5,           5,],
    [           7,           7,],
    [           9,           9,],
    [          11,          11,],
    [          13,          13,],
    [          15,          15,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 2
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 3
    mesh_ez.curves[1].nnodes = 11
    mesh_ez.curves[1].nelem = 5
    mesh_ez.curves[1].nodes = np.array([
              15,
              44,
              59,
              88,
             103,
             132,
             147,
             176,
             191,
             220,
             235,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,          15,],
    [           3,          59,],
    [           5,         103,],
    [           7,         147,],
    [           9,         191,],
    ],
    [
    [           2,          44,],
    [           4,          88,],
    [           6,         132,],
    [           8,         176,],
    [          10,         220,],
    ],
    [
    [           3,          59,],
    [           5,         103,],
    [           7,         147,],
    [           9,         191,],
    [          11,         235,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 2
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 3
    mesh_ez.curves[2].nnodes = 15
    mesh_ez.curves[2].nelem = 7
    mesh_ez.curves[2].nodes = np.array([
             235,
             234,
             233,
             232,
             231,
             230,
             229,
             228,
             227,
             226,
             225,
             224,
             223,
             222,
             221,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,         235,],
    [           3,         233,],
    [           5,         231,],
    [           7,         229,],
    [           9,         227,],
    [          11,         225,],
    [          13,         223,],
    ],
    [
    [           2,         234,],
    [           4,         232,],
    [           6,         230,],
    [           8,         228,],
    [          10,         226,],
    [          12,         224,],
    [          14,         222,],
    ],
    [
    [           3,         233,],
    [           5,         231,],
    [           7,         229,],
    [           9,         227,],
    [          11,         225,],
    [          13,         223,],
    [          15,         221,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 2
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 3
    mesh_ez.curves[3].nnodes = 11
    mesh_ez.curves[3].nelem = 5
    mesh_ez.curves[3].nodes = np.array([
             221,
             206,
             177,
             162,
             133,
             118,
              89,
              74,
              45,
              30,
               1,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,         221,],
    [           3,         177,],
    [           5,         133,],
    [           7,          89,],
    [           9,          45,],
    ],
    [
    [           2,         206,],
    [           4,         162,],
    [           6,         118,],
    [           8,          74,],
    [          10,          30,],
    ],
    [
    [           3,         177,],
    [           5,         133,],
    [           7,          89,],
    [           9,          45,],
    [          11,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test15_quadrilaterial2d(self):
    mesh_py = line1d(5,'line2')
    mesh_ez = Mesh()
    mesh_ez.ndim = 1
    mesh_ez.nnodes = 6
    mesh_ez.elshape = 1
    mesh_ez.nelem = 5
    mesh_ez.elnumnod = 2
    mesh_ez.npoints = 2
    mesh_ez.topology = np.array([
    [           1,           2,           3,           4,           5,],
    [           2,           3,           4,           5,           6,],
    ],dtype=int)
    mesh_ez.coor = np.array([
       0.0000000000000000e+00,
       2.0000000000000001e-01,
       4.0000000000000002e-01,
       6.0000000000000009e-01,
       8.0000000000000004e-01,
       1.0000000000000000e+00,
    ])
    mesh_ez.points = np.array([
               1,
               6,
    ],dtype=int)
    mesh_ez.ncurves = 0
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test16_quadrilaterial2d(self):
    mesh_py = line1d(5,'line2',ratio=1,factor=1.2,length=5.0,origin=2.0)
    mesh_ez = Mesh()
    mesh_ez.ndim = 1
    mesh_ez.nnodes = 6
    mesh_ez.elshape = 1
    mesh_ez.nelem = 5
    mesh_ez.elnumnod = 2
    mesh_ez.npoints = 2
    mesh_ez.topology = np.array([
    [           1,           2,           3,           4,           5,],
    [           2,           3,           4,           5,           6,],
    ],dtype=int)
    mesh_ez.coor = np.array([
       2.0000000000000000e+00,
       2.9109771941963758e+00,
       3.8644379368271284e+00,
       4.8623634540953669e+00,
       5.9068273669643485e+00,
       7.0000000000000000e+00,
    ])
    mesh_ez.points = np.array([
               1,
               6,
    ],dtype=int)
    mesh_ez.ncurves = 0
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test17_quadrilaterial2d(self):
    mesh_py = line1d(5,'line3')
    mesh_ez = Mesh()
    mesh_ez.ndim = 1
    mesh_ez.nnodes = 11
    mesh_ez.elshape = 2
    mesh_ez.nelem = 5
    mesh_ez.elnumnod = 3
    mesh_ez.npoints = 2
    mesh_ez.topology = np.array([
    [           1,           3,           5,           7,           9,],
    [           2,           4,           6,           8,          10,],
    [           3,           5,           7,           9,          11,],
    ],dtype=int)
    mesh_ez.coor = np.array([
       0.0000000000000000e+00,
       1.0000000000000001e-01,
       2.0000000000000001e-01,
       3.0000000000000004e-01,
       4.0000000000000002e-01,
       5.0000000000000000e-01,
       6.0000000000000009e-01,
       7.0000000000000007e-01,
       8.0000000000000004e-01,
       9.0000000000000002e-01,
       1.0000000000000000e+00,
    ])
    mesh_ez.points = np.array([
               1,
              11,
    ],dtype=int)
    mesh_ez.ncurves = 0
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test18_quadrilaterial2d(self):
    mesh_py = line1d(5,'line3',ratio=1,factor=1.2,length=5.0,origin=2.0)
    mesh_ez = Mesh()
    mesh_ez.ndim = 1
    mesh_ez.nnodes = 11
    mesh_ez.elshape = 2
    mesh_ez.nelem = 5
    mesh_ez.elnumnod = 3
    mesh_ez.npoints = 2
    mesh_ez.topology = np.array([
    [           1,           3,           5,           7,           9,],
    [           2,           4,           6,           8,          10,],
    [           3,           5,           7,           9,          11,],
    ],dtype=int)
    mesh_ez.coor = np.array([
       2.0000000000000000e+00,
       2.4554885970981877e+00,
       2.9109771941963758e+00,
       3.3877075655117519e+00,
       3.8644379368271284e+00,
       4.3634006954612481e+00,
       4.8623634540953669e+00,
       5.3845954105298581e+00,
       5.9068273669643485e+00,
       6.4534136834821751e+00,
       7.0000000000000000e+00,
    ])
    mesh_ez.points = np.array([
               1,
              11,
    ],dtype=int)
    mesh_ez.ncurves = 0
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test19_quadrilaterial2d(self):
    mesh_py = l_shape2d([4,5,6,7],'quad4',factor=[10,10,10,10],origin=[-1,2],length=[1,2,3,4])
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 112
    mesh_ez.elshape = 5
    mesh_ez.elnumnod = 4
    mesh_ez.nelem = 89
    mesh_ez.topology = np.array([
    [           1,           2,           3,           4,           6,           7,           8,           9,          11,          12,          13,          14,          16,          17,          18,          19,          21,          22,          23,          24,          26,          27,          28,          29,           5,          36,          37,          38,          39,          10,          41,          42,          43,          44,          15,          46,          47,          48,          49,          20,          51,          52,          53,          54,          25,          56,          57,          58,          59,          30,          61,          62,          63,          64,          71,          72,          73,          74,          75,          77,          78,          79,          80,          81,          83,          84,          85,          86,          87,          89,          90,          91,          92,          93,          95,          96,          97,          98,          99,         101,         102,         103,         104,         105,         107,         108,         109,         110,         111,],
    [           2,           3,           4,           5,           7,           8,           9,          10,          12,          13,          14,          15,          17,          18,          19,          20,          22,          23,          24,          25,          27,          28,          29,          30,          36,          37,          38,          39,          40,          41,          42,          43,          44,          45,          46,          47,          48,          49,          50,          51,          52,          53,          54,          55,          56,          57,          58,          59,          60,          61,          62,          63,          64,          65,          72,          73,          74,          75,          76,          78,          79,          80,          81,          82,          84,          85,          86,          87,          88,          90,          91,          92,          93,          94,          96,          97,          98,          99,         100,         102,         103,         104,         105,         106,         108,         109,         110,         111,         112,],
    [           7,           8,           9,          10,          12,          13,          14,          15,          17,          18,          19,          20,          22,          23,          24,          25,          27,          28,          29,          30,          32,          33,          34,          35,          41,          42,          43,          44,          45,          46,          47,          48,          49,          50,          51,          52,          53,          54,          55,          56,          57,          58,          59,          60,          61,          62,          63,          64,          65,          66,          67,          68,          69,          70,          78,          79,          80,          81,          82,          84,          85,          86,          87,          88,          90,          91,          92,          93,          94,          96,          97,          98,          99,         100,         102,         103,         104,         105,         106,         108,         109,         110,         111,         112,          36,          37,          38,          39,          40,],
    [           6,           7,           8,           9,          11,          12,          13,          14,          16,          17,          18,          19,          21,          22,          23,          24,          26,          27,          28,          29,          31,          32,          33,          34,          10,          41,          42,          43,          44,          15,          46,          47,          48,          49,          20,          51,          52,          53,          54,          25,          56,          57,          58,          59,          30,          61,          62,          63,          64,          35,          66,          67,          68,          69,          77,          78,          79,          80,          81,          83,          84,          85,          86,          87,          89,          90,          91,          92,          93,          95,          96,          97,          98,          99,         101,         102,         103,         104,         105,         107,         108,         109,         110,         111,           5,          36,          37,          38,          39,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [  -2.0000000000000000e+00,   2.0000000000000000e+00,],
    [  -1.4380767149069276e+00,   2.0000000000000000e+00,],
    [  -1.1772550303634262e+00,   2.0000000000000000e+00,],
    [  -1.0561923285093071e+00,   2.0000000000000000e+00,],
    [  -1.0000000000000000e+00,   2.0000000000000000e+00,],
    [  -2.0000000000000000e+00,   2.1181687401014395e+00,],
    [  -1.4380767149069276e+00,   2.1181687401014395e+00,],
    [  -1.1772550303634262e+00,   2.1181687401014395e+00,],
    [  -1.0561923285093071e+00,   2.1181687401014395e+00,],
    [  -1.0000000000000000e+00,   2.1181687401014395e+00,],
    [  -2.0000000000000000e+00,   2.3054535718499176e+00,],
    [  -1.4380767149069276e+00,   2.3054535718499176e+00,],
    [  -1.1772550303634262e+00,   2.3054535718499176e+00,],
    [  -1.0561923285093071e+00,   2.3054535718499176e+00,],
    [  -1.0000000000000000e+00,   2.3054535718499176e+00,],
    [  -2.0000000000000000e+00,   2.6022800267393054e+00,],
    [  -1.4380767149069276e+00,   2.6022800267393054e+00,],
    [  -1.1772550303634262e+00,   2.6022800267393054e+00,],
    [  -1.0561923285093071e+00,   2.6022800267393054e+00,],
    [  -1.0000000000000000e+00,   2.6022800267393054e+00,],
    [  -2.0000000000000000e+00,   3.0727182544358618e+00,],
    [  -1.4380767149069276e+00,   3.0727182544358618e+00,],
    [  -1.1772550303634262e+00,   3.0727182544358618e+00,],
    [  -1.0561923285093071e+00,   3.0727182544358618e+00,],
    [  -1.0000000000000000e+00,   3.0727182544358618e+00,],
    [  -2.0000000000000000e+00,   3.8183125989856053e+00,],
    [  -1.4380767149069278e+00,   3.8183125989856053e+00,],
    [  -1.1772550303634262e+00,   3.8183125989856053e+00,],
    [  -1.0561923285093071e+00,   3.8183125989856053e+00,],
    [  -1.0000000000000000e+00,   3.8183125989856053e+00,],
    [  -2.0000000000000000e+00,   5.0000000000000000e+00,],
    [  -1.4380767149069278e+00,   5.0000000000000000e+00,],
    [  -1.1772550303634264e+00,   5.0000000000000000e+00,],
    [  -1.0561923285093071e+00,   5.0000000000000000e+00,],
    [  -1.0000000000000000e+00,   5.0000000000000000e+00,],
    [  -9.0725270114338441e-01,   2.0000000000000000e+00,],
    [  -7.4232208924993826e-01,   2.0000000000000000e+00,],
    [  -4.4902937803470233e-01,   2.0000000000000000e+00,],
    [   7.2527011433843658e-02,   2.0000000000000000e+00,],
    [   1.0000000000000000e+00,   2.0000000000000000e+00,],
    [  -9.0725270114338441e-01,   2.1181687401014395e+00,],
    [  -7.4232208924993826e-01,   2.1181687401014395e+00,],
    [  -4.4902937803470233e-01,   2.1181687401014395e+00,],
    [   7.2527011433843658e-02,   2.1181687401014395e+00,],
    [   1.0000000000000000e+00,   2.1181687401014395e+00,],
    [  -9.0725270114338441e-01,   2.3054535718499176e+00,],
    [  -7.4232208924993826e-01,   2.3054535718499176e+00,],
    [  -4.4902937803470233e-01,   2.3054535718499176e+00,],
    [   7.2527011433843658e-02,   2.3054535718499176e+00,],
    [   1.0000000000000000e+00,   2.3054535718499176e+00,],
    [  -9.0725270114338441e-01,   2.6022800267393054e+00,],
    [  -7.4232208924993826e-01,   2.6022800267393054e+00,],
    [  -4.4902937803470233e-01,   2.6022800267393054e+00,],
    [   7.2527011433843658e-02,   2.6022800267393054e+00,],
    [   1.0000000000000000e+00,   2.6022800267393054e+00,],
    [  -9.0725270114338441e-01,   3.0727182544358618e+00,],
    [  -7.4232208924993826e-01,   3.0727182544358618e+00,],
    [  -4.4902937803470233e-01,   3.0727182544358618e+00,],
    [   7.2527011433843658e-02,   3.0727182544358618e+00,],
    [   1.0000000000000000e+00,   3.0727182544358618e+00,],
    [  -9.0725270114338441e-01,   3.8183125989856053e+00,],
    [  -7.4232208924993826e-01,   3.8183125989856053e+00,],
    [  -4.4902937803470233e-01,   3.8183125989856053e+00,],
    [   7.2527011433843658e-02,   3.8183125989856053e+00,],
    [   1.0000000000000000e+00,   3.8183125989856053e+00,],
    [  -9.0725270114338441e-01,   5.0000000000000000e+00,],
    [  -7.4232208924993826e-01,   5.0000000000000000e+00,],
    [  -4.4902937803470233e-01,   5.0000000000000000e+00,],
    [   7.2527011433843658e-02,   5.0000000000000000e+00,],
    [   1.0000000000000000e+00,   5.0000000000000000e+00,],
    [  -1.0000000000000000e+00,  -2.0000000000000000e+00,],
    [  -9.0725270114338441e-01,  -2.0000000000000000e+00,],
    [  -7.4232208924993826e-01,  -2.0000000000000000e+00,],
    [  -4.4902937803470233e-01,  -2.0000000000000000e+00,],
    [   7.2527011433843658e-02,  -2.0000000000000000e+00,],
    [   1.0000000000000000e+00,  -2.0000000000000000e+00,],
    [  -1.0000000000000000e+00,  -6.3196514665388737e-01,],
    [  -9.0725270114338441e-01,  -6.3196514665388737e-01,],
    [  -7.4232208924993826e-01,  -6.3196514665388737e-01,],
    [  -4.4902937803470233e-01,  -6.3196514665388737e-01,],
    [   7.2527011433843658e-02,  -6.3196514665388737e-01,],
    [   1.0000000000000000e+00,  -6.3196514665388737e-01,],
    [  -1.0000000000000000e+00,   3.0006614912569063e-01,],
    [  -9.0725270114338441e-01,   3.0006614912569063e-01,],
    [  -7.4232208924993826e-01,   3.0006614912569063e-01,],
    [  -4.4902937803470233e-01,   3.0006614912569063e-01,],
    [   7.2527011433843658e-02,   3.0006614912569018e-01,],
    [   1.0000000000000000e+00,   3.0006614912569018e-01,],
    [  -1.0000000000000000e+00,   9.3505167905413167e-01,],
    [  -9.0725270114338441e-01,   9.3505167905413167e-01,],
    [  -7.4232208924993826e-01,   9.3505167905413167e-01,],
    [  -4.4902937803470233e-01,   9.3505167905413167e-01,],
    [   7.2527011433843658e-02,   9.3505167905413122e-01,],
    [   1.0000000000000000e+00,   9.3505167905413122e-01,],
    [  -1.0000000000000000e+00,   1.3676622845609456e+00,],
    [  -9.0725270114338441e-01,   1.3676622845609456e+00,],
    [  -7.4232208924993826e-01,   1.3676622845609456e+00,],
    [  -4.4902937803470233e-01,   1.3676622845609452e+00,],
    [   7.2527011433843658e-02,   1.3676622845609452e+00,],
    [   1.0000000000000000e+00,   1.3676622845609447e+00,],
    [  -1.0000000000000000e+00,   1.6623964590830997e+00,],
    [  -9.0725270114338441e-01,   1.6623964590830997e+00,],
    [  -7.4232208924993826e-01,   1.6623964590830997e+00,],
    [  -4.4902937803470233e-01,   1.6623964590830997e+00,],
    [   7.2527011433843658e-02,   1.6623964590830993e+00,],
    [   1.0000000000000000e+00,   1.6623964590830993e+00,],
    [  -1.0000000000000000e+00,   1.8631965146653888e+00,],
    [  -9.0725270114338441e-01,   1.8631965146653888e+00,],
    [  -7.4232208924993826e-01,   1.8631965146653888e+00,],
    [  -4.4902937803470233e-01,   1.8631965146653888e+00,],
    [   7.2527011433843658e-02,   1.8631965146653884e+00,],
    [   1.0000000000000000e+00,   1.8631965146653884e+00,],
    ])
    mesh_ez.npoints = 8
    mesh_ez.points = np.array([
               1,
               5,
              35,
              31,
              40,
              70,
              71,
              76,
    ],dtype=int)
    mesh_ez.ncurves = 8
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 5
    mesh_ez.curves[0].nelem = 4
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 5
    mesh_ez.curves[1].nelem = 4
    mesh_ez.curves[1].nodes = np.array([
              35,
              34,
              33,
              32,
              31,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,          35,],
    [           2,          34,],
    [           3,          33,],
    [           4,          32,],
    ],
    [
    [           2,          34,],
    [           3,          33,],
    [           4,          32,],
    [           5,          31,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 7
    mesh_ez.curves[2].nelem = 6
    mesh_ez.curves[2].nodes = np.array([
              31,
              26,
              21,
              16,
              11,
               6,
               1,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          31,],
    [           2,          26,],
    [           3,          21,],
    [           4,          16,],
    [           5,          11,],
    [           6,           6,],
    ],
    [
    [           2,          26,],
    [           3,          21,],
    [           4,          16,],
    [           5,          11,],
    [           6,           6,],
    [           7,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 7
    mesh_ez.curves[3].nelem = 6
    mesh_ez.curves[3].nodes = np.array([
              40,
              45,
              50,
              55,
              60,
              65,
              70,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,          40,],
    [           2,          45,],
    [           3,          50,],
    [           4,          55,],
    [           5,          60,],
    [           6,          65,],
    ],
    [
    [           2,          45,],
    [           3,          50,],
    [           4,          55,],
    [           5,          60,],
    [           6,          65,],
    [           7,          70,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[4].elshape = 1
    mesh_ez.curves[4].ndim = 2
    mesh_ez.curves[4].elnumnod = 2
    mesh_ez.curves[4].nnodes = 6
    mesh_ez.curves[4].nelem = 5
    mesh_ez.curves[4].nodes = np.array([
              70,
              69,
              68,
              67,
              66,
              35,
    ],dtype=int)
    mesh_ez.curves[4].topology = np.array([
    [
    [           1,          70,],
    [           2,          69,],
    [           3,          68,],
    [           4,          67,],
    [           5,          66,],
    ],
    [
    [           2,          69,],
    [           3,          68,],
    [           4,          67,],
    [           5,          66,],
    [           6,          35,],
    ],
    ],dtype=int)
    mesh_ez.curves[4].topology = mesh_ez.curves[4].topology - 1 # Python indexing
    mesh_ez.curves[4].nodes = mesh_ez.curves[4].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[5].elshape = 1
    mesh_ez.curves[5].ndim = 2
    mesh_ez.curves[5].elnumnod = 2
    mesh_ez.curves[5].nnodes = 6
    mesh_ez.curves[5].nelem = 5
    mesh_ez.curves[5].nodes = np.array([
              71,
              72,
              73,
              74,
              75,
              76,
    ],dtype=int)
    mesh_ez.curves[5].topology = np.array([
    [
    [           1,          71,],
    [           2,          72,],
    [           3,          73,],
    [           4,          74,],
    [           5,          75,],
    ],
    [
    [           2,          72,],
    [           3,          73,],
    [           4,          74,],
    [           5,          75,],
    [           6,          76,],
    ],
    ],dtype=int)
    mesh_ez.curves[5].topology = mesh_ez.curves[5].topology - 1 # Python indexing
    mesh_ez.curves[5].nodes = mesh_ez.curves[5].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[6].elshape = 1
    mesh_ez.curves[6].ndim = 2
    mesh_ez.curves[6].elnumnod = 2
    mesh_ez.curves[6].nnodes = 8
    mesh_ez.curves[6].nelem = 7
    mesh_ez.curves[6].nodes = np.array([
              76,
              82,
              88,
              94,
             100,
             106,
             112,
              40,
    ],dtype=int)
    mesh_ez.curves[6].topology = np.array([
    [
    [           1,          76,],
    [           2,          82,],
    [           3,          88,],
    [           4,          94,],
    [           5,         100,],
    [           6,         106,],
    [           7,         112,],
    ],
    [
    [           2,          82,],
    [           3,          88,],
    [           4,          94,],
    [           5,         100,],
    [           6,         106,],
    [           7,         112,],
    [           8,          40,],
    ],
    ],dtype=int)
    mesh_ez.curves[6].topology = mesh_ez.curves[6].topology - 1 # Python indexing
    mesh_ez.curves[6].nodes = mesh_ez.curves[6].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[7].elshape = 1
    mesh_ez.curves[7].ndim = 2
    mesh_ez.curves[7].elnumnod = 2
    mesh_ez.curves[7].nnodes = 8
    mesh_ez.curves[7].nelem = 7
    mesh_ez.curves[7].nodes = np.array([
               5,
             107,
             101,
              95,
              89,
              83,
              77,
              71,
    ],dtype=int)
    mesh_ez.curves[7].topology = np.array([
    [
    [           1,           5,],
    [           2,         107,],
    [           3,         101,],
    [           4,          95,],
    [           5,          89,],
    [           6,          83,],
    [           7,          77,],
    ],
    [
    [           2,         107,],
    [           3,         101,],
    [           4,          95,],
    [           5,          89,],
    [           6,          83,],
    [           7,          77,],
    [           8,          71,],
    ],
    ],dtype=int)
    mesh_ez.curves[7].topology = mesh_ez.curves[7].topology - 1 # Python indexing
    mesh_ez.curves[7].nodes = mesh_ez.curves[7].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test20_quadrilaterial2d(self):
    mesh_py = two_blocks2d([4,5,6],'quad4',factor=[10,10,10],origin=[-1,2],length=[1,2,3])
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 70
    mesh_ez.elshape = 5
    mesh_ez.elnumnod = 4
    mesh_ez.nelem = 54
    mesh_ez.topology = np.array([
    [           1,           2,           3,           4,           6,           7,           8,           9,          11,          12,          13,          14,          16,          17,          18,          19,          21,          22,          23,          24,          26,          27,          28,          29,           5,          36,          37,          38,          39,          10,          41,          42,          43,          44,          15,          46,          47,          48,          49,          20,          51,          52,          53,          54,          25,          56,          57,          58,          59,          30,          61,          62,          63,          64,],
    [           2,           3,           4,           5,           7,           8,           9,          10,          12,          13,          14,          15,          17,          18,          19,          20,          22,          23,          24,          25,          27,          28,          29,          30,          36,          37,          38,          39,          40,          41,          42,          43,          44,          45,          46,          47,          48,          49,          50,          51,          52,          53,          54,          55,          56,          57,          58,          59,          60,          61,          62,          63,          64,          65,],
    [           7,           8,           9,          10,          12,          13,          14,          15,          17,          18,          19,          20,          22,          23,          24,          25,          27,          28,          29,          30,          32,          33,          34,          35,          41,          42,          43,          44,          45,          46,          47,          48,          49,          50,          51,          52,          53,          54,          55,          56,          57,          58,          59,          60,          61,          62,          63,          64,          65,          66,          67,          68,          69,          70,],
    [           6,           7,           8,           9,          11,          12,          13,          14,          16,          17,          18,          19,          21,          22,          23,          24,          26,          27,          28,          29,          31,          32,          33,          34,          10,          41,          42,          43,          44,          15,          46,          47,          48,          49,          20,          51,          52,          53,          54,          25,          56,          57,          58,          59,          30,          61,          62,          63,          64,          35,          66,          67,          68,          69,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [  -2.0000000000000000e+00,   2.0000000000000000e+00,],
    [  -1.4380767149069276e+00,   2.0000000000000000e+00,],
    [  -1.1772550303634262e+00,   2.0000000000000000e+00,],
    [  -1.0561923285093071e+00,   2.0000000000000000e+00,],
    [  -1.0000000000000000e+00,   2.0000000000000000e+00,],
    [  -2.0000000000000000e+00,   3.1816874010143947e+00,],
    [  -1.4380767149069276e+00,   3.1816874010143947e+00,],
    [  -1.1772550303634262e+00,   3.1816874010143947e+00,],
    [  -1.0561923285093071e+00,   3.1816874010143947e+00,],
    [  -1.0000000000000000e+00,   3.1816874010143947e+00,],
    [  -2.0000000000000000e+00,   3.9272817455641382e+00,],
    [  -1.4380767149069278e+00,   3.9272817455641382e+00,],
    [  -1.1772550303634262e+00,   3.9272817455641382e+00,],
    [  -1.0561923285093071e+00,   3.9272817455641382e+00,],
    [  -1.0000000000000000e+00,   3.9272817455641382e+00,],
    [  -2.0000000000000000e+00,   4.3977199732606946e+00,],
    [  -1.4380767149069278e+00,   4.3977199732606946e+00,],
    [  -1.1772550303634264e+00,   4.3977199732606946e+00,],
    [  -1.0561923285093071e+00,   4.3977199732606946e+00,],
    [  -1.0000000000000000e+00,   4.3977199732606946e+00,],
    [  -2.0000000000000000e+00,   4.6945464281500824e+00,],
    [  -1.4380767149069278e+00,   4.6945464281500824e+00,],
    [  -1.1772550303634264e+00,   4.6945464281500824e+00,],
    [  -1.0561923285093071e+00,   4.6945464281500824e+00,],
    [  -1.0000000000000000e+00,   4.6945464281500824e+00,],
    [  -2.0000000000000000e+00,   4.8818312598985605e+00,],
    [  -1.4380767149069278e+00,   4.8818312598985605e+00,],
    [  -1.1772550303634264e+00,   4.8818312598985605e+00,],
    [  -1.0561923285093071e+00,   4.8818312598985605e+00,],
    [  -1.0000000000000000e+00,   4.8818312598985605e+00,],
    [  -2.0000000000000000e+00,   5.0000000000000000e+00,],
    [  -1.4380767149069278e+00,   5.0000000000000000e+00,],
    [  -1.1772550303634264e+00,   5.0000000000000000e+00,],
    [  -1.0561923285093071e+00,   5.0000000000000000e+00,],
    [  -1.0000000000000000e+00,   5.0000000000000000e+00,],
    [  -9.0725270114338441e-01,   2.0000000000000000e+00,],
    [  -7.4232208924993826e-01,   2.0000000000000000e+00,],
    [  -4.4902937803470233e-01,   2.0000000000000000e+00,],
    [   7.2527011433843658e-02,   2.0000000000000000e+00,],
    [   1.0000000000000000e+00,   2.0000000000000000e+00,],
    [  -9.0725270114338441e-01,   3.1816874010143947e+00,],
    [  -7.4232208924993826e-01,   3.1816874010143947e+00,],
    [  -4.4902937803470233e-01,   3.1816874010143947e+00,],
    [   7.2527011433843658e-02,   3.1816874010143947e+00,],
    [   1.0000000000000000e+00,   3.1816874010143947e+00,],
    [  -9.0725270114338441e-01,   3.9272817455641382e+00,],
    [  -7.4232208924993826e-01,   3.9272817455641382e+00,],
    [  -4.4902937803470233e-01,   3.9272817455641382e+00,],
    [   7.2527011433843658e-02,   3.9272817455641382e+00,],
    [   1.0000000000000000e+00,   3.9272817455641382e+00,],
    [  -9.0725270114338441e-01,   4.3977199732606946e+00,],
    [  -7.4232208924993826e-01,   4.3977199732606946e+00,],
    [  -4.4902937803470233e-01,   4.3977199732606946e+00,],
    [   7.2527011433843658e-02,   4.3977199732606946e+00,],
    [   1.0000000000000000e+00,   4.3977199732606946e+00,],
    [  -9.0725270114338441e-01,   4.6945464281500824e+00,],
    [  -7.4232208924993826e-01,   4.6945464281500824e+00,],
    [  -4.4902937803470233e-01,   4.6945464281500824e+00,],
    [   7.2527011433843658e-02,   4.6945464281500824e+00,],
    [   1.0000000000000000e+00,   4.6945464281500824e+00,],
    [  -9.0725270114338441e-01,   4.8818312598985605e+00,],
    [  -7.4232208924993826e-01,   4.8818312598985605e+00,],
    [  -4.4902937803470233e-01,   4.8818312598985605e+00,],
    [   7.2527011433843658e-02,   4.8818312598985605e+00,],
    [   1.0000000000000000e+00,   4.8818312598985605e+00,],
    [  -9.0725270114338441e-01,   5.0000000000000000e+00,],
    [  -7.4232208924993826e-01,   5.0000000000000000e+00,],
    [  -4.4902937803470233e-01,   5.0000000000000000e+00,],
    [   7.2527011433843658e-02,   5.0000000000000000e+00,],
    [   1.0000000000000000e+00,   5.0000000000000000e+00,],
    ])
    mesh_ez.npoints = 6
    mesh_ez.points = np.array([
               1,
               5,
              35,
              31,
              40,
              70,
    ],dtype=int)
    mesh_ez.ncurves = 6
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 5
    mesh_ez.curves[0].nelem = 4
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
               4,
               5,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    [           4,           4,],
    [           5,           5,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 5
    mesh_ez.curves[1].nelem = 4
    mesh_ez.curves[1].nodes = np.array([
              35,
              34,
              33,
              32,
              31,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,          35,],
    [           2,          34,],
    [           3,          33,],
    [           4,          32,],
    ],
    [
    [           2,          34,],
    [           3,          33,],
    [           4,          32,],
    [           5,          31,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 7
    mesh_ez.curves[2].nelem = 6
    mesh_ez.curves[2].nodes = np.array([
              31,
              26,
              21,
              16,
              11,
               6,
               1,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          31,],
    [           2,          26,],
    [           3,          21,],
    [           4,          16,],
    [           5,          11,],
    [           6,           6,],
    ],
    [
    [           2,          26,],
    [           3,          21,],
    [           4,          16,],
    [           5,          11,],
    [           6,           6,],
    [           7,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 6
    mesh_ez.curves[3].nelem = 5
    mesh_ez.curves[3].nodes = np.array([
               5,
              36,
              37,
              38,
              39,
              40,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,           5,],
    [           2,          36,],
    [           3,          37,],
    [           4,          38,],
    [           5,          39,],
    ],
    [
    [           2,          36,],
    [           3,          37,],
    [           4,          38,],
    [           5,          39,],
    [           6,          40,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[4].elshape = 1
    mesh_ez.curves[4].ndim = 2
    mesh_ez.curves[4].elnumnod = 2
    mesh_ez.curves[4].nnodes = 7
    mesh_ez.curves[4].nelem = 6
    mesh_ez.curves[4].nodes = np.array([
              40,
              45,
              50,
              55,
              60,
              65,
              70,
    ],dtype=int)
    mesh_ez.curves[4].topology = np.array([
    [
    [           1,          40,],
    [           2,          45,],
    [           3,          50,],
    [           4,          55,],
    [           5,          60,],
    [           6,          65,],
    ],
    [
    [           2,          45,],
    [           3,          50,],
    [           4,          55,],
    [           5,          60,],
    [           6,          65,],
    [           7,          70,],
    ],
    ],dtype=int)
    mesh_ez.curves[4].topology = mesh_ez.curves[4].topology - 1 # Python indexing
    mesh_ez.curves[4].nodes = mesh_ez.curves[4].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[5].elshape = 1
    mesh_ez.curves[5].ndim = 2
    mesh_ez.curves[5].elnumnod = 2
    mesh_ez.curves[5].nnodes = 6
    mesh_ez.curves[5].nelem = 5
    mesh_ez.curves[5].nodes = np.array([
              70,
              69,
              68,
              67,
              66,
              35,
    ],dtype=int)
    mesh_ez.curves[5].topology = np.array([
    [
    [           1,          70,],
    [           2,          69,],
    [           3,          68,],
    [           4,          67,],
    [           5,          66,],
    ],
    [
    [           2,          69,],
    [           3,          68,],
    [           4,          67,],
    [           5,          66,],
    [           6,          35,],
    ],
    ],dtype=int)
    mesh_ez.curves[5].topology = mesh_ez.curves[5].topology - 1 # Python indexing
    mesh_ez.curves[5].nodes = mesh_ez.curves[5].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
  def test21_quadrilaterial2d(self):
    mesh_tmp1 = quadrilateral2d([2, 3], 'quad4', origin=[-2.0, 0.0], length=[2.0, 3.0]);    mesh_tmp2 = quadrilateral2d([4, 3], 'quad4', origin=[0.0, 0.0], length=[4.0, 3.0]);    mesh_py = mesh_merge(mesh_tmp1, mesh_tmp2, curves1=[1], curves2=[-3], deletecurves1=[1], deletepoints1=[0]);
    mesh_ez = Mesh()
    mesh_ez.ndim = 2
    mesh_ez.nnodes = 28
    mesh_ez.elshape = 5
    mesh_ez.elnumnod = 4
    mesh_ez.nelem = 18
    mesh_ez.topology = np.array([
    [           1,           2,           4,           5,           7,           8,           3,          13,          14,          15,           6,          17,          18,          19,           9,          21,          22,          23,],
    [           2,           3,           5,           6,           8,           9,          13,          14,          15,          16,          17,          18,          19,          20,          21,          22,          23,          24,],
    [           5,           6,           8,           9,          11,          12,          17,          18,          19,          20,          21,          22,          23,          24,          25,          26,          27,          28,],
    [           4,           5,           7,           8,          10,          11,           6,          17,          18,          19,           9,          21,          22,          23,          12,          25,          26,          27,],
    ],dtype=int)
    mesh_ez.coor = np.array([
    [          -2,           0,],
    [          -1,           0,],
    [           0,           0,],
    [          -2,           1,],
    [          -1,           1,],
    [           0,           1,],
    [          -2,           2,],
    [          -1,           2,],
    [           0,           2,],
    [          -2,           3,],
    [          -1,           3,],
    [           0,           3,],
    [           1,           0,],
    [           2,           0,],
    [           3,           0,],
    [           4,           0,],
    [           1,           1,],
    [           2,           1,],
    [           3,           1,],
    [           4,           1,],
    [           1,           2,],
    [           2,           2,],
    [           3,           2,],
    [           4,           2,],
    [           1,           3,],
    [           2,           3,],
    [           3,           3,],
    [           4,           3,],
    ],dtype=int)
    mesh_ez.npoints = 5
    mesh_ez.points = np.array([
               3,
              12,
              10,
              16,
              28,
    ],dtype=int)
    mesh_ez.ncurves = 6
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[0].elshape = 1
    mesh_ez.curves[0].ndim = 2
    mesh_ez.curves[0].elnumnod = 2
    mesh_ez.curves[0].nnodes = 3
    mesh_ez.curves[0].nelem = 2
    mesh_ez.curves[0].nodes = np.array([
               1,
               2,
               3,
    ],dtype=int)
    mesh_ez.curves[0].topology = np.array([
    [
    [           1,           1,],
    [           2,           2,],
    ],
    [
    [           2,           2,],
    [           3,           3,],
    ],
    ],dtype=int)
    mesh_ez.curves[0].topology = mesh_ez.curves[0].topology - 1 # Python indexing
    mesh_ez.curves[0].nodes = mesh_ez.curves[0].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[1].elshape = 1
    mesh_ez.curves[1].ndim = 2
    mesh_ez.curves[1].elnumnod = 2
    mesh_ez.curves[1].nnodes = 3
    mesh_ez.curves[1].nelem = 2
    mesh_ez.curves[1].nodes = np.array([
              12,
              11,
              10,
    ],dtype=int)
    mesh_ez.curves[1].topology = np.array([
    [
    [           1,          12,],
    [           2,          11,],
    ],
    [
    [           2,          11,],
    [           3,          10,],
    ],
    ],dtype=int)
    mesh_ez.curves[1].topology = mesh_ez.curves[1].topology - 1 # Python indexing
    mesh_ez.curves[1].nodes = mesh_ez.curves[1].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[2].elshape = 1
    mesh_ez.curves[2].ndim = 2
    mesh_ez.curves[2].elnumnod = 2
    mesh_ez.curves[2].nnodes = 4
    mesh_ez.curves[2].nelem = 3
    mesh_ez.curves[2].nodes = np.array([
              10,
               7,
               4,
               1,
    ],dtype=int)
    mesh_ez.curves[2].topology = np.array([
    [
    [           1,          10,],
    [           2,           7,],
    [           3,           4,],
    ],
    [
    [           2,           7,],
    [           3,           4,],
    [           4,           1,],
    ],
    ],dtype=int)
    mesh_ez.curves[2].topology = mesh_ez.curves[2].topology - 1 # Python indexing
    mesh_ez.curves[2].nodes = mesh_ez.curves[2].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[3].elshape = 1
    mesh_ez.curves[3].ndim = 2
    mesh_ez.curves[3].elnumnod = 2
    mesh_ez.curves[3].nnodes = 5
    mesh_ez.curves[3].nelem = 4
    mesh_ez.curves[3].nodes = np.array([
               3,
              13,
              14,
              15,
              16,
    ],dtype=int)
    mesh_ez.curves[3].topology = np.array([
    [
    [           1,           3,],
    [           2,          13,],
    [           3,          14,],
    [           4,          15,],
    ],
    [
    [           2,          13,],
    [           3,          14,],
    [           4,          15,],
    [           5,          16,],
    ],
    ],dtype=int)
    mesh_ez.curves[3].topology = mesh_ez.curves[3].topology - 1 # Python indexing
    mesh_ez.curves[3].nodes = mesh_ez.curves[3].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[4].elshape = 1
    mesh_ez.curves[4].ndim = 2
    mesh_ez.curves[4].elnumnod = 2
    mesh_ez.curves[4].nnodes = 4
    mesh_ez.curves[4].nelem = 3
    mesh_ez.curves[4].nodes = np.array([
              16,
              20,
              24,
              28,
    ],dtype=int)
    mesh_ez.curves[4].topology = np.array([
    [
    [           1,          16,],
    [           2,          20,],
    [           3,          24,],
    ],
    [
    [           2,          20,],
    [           3,          24,],
    [           4,          28,],
    ],
    ],dtype=int)
    mesh_ez.curves[4].topology = mesh_ez.curves[4].topology - 1 # Python indexing
    mesh_ez.curves[4].nodes = mesh_ez.curves[4].nodes - 1 # Python indexing
    mesh_ez.curves.append(Geometry())
    mesh_ez.curves[5].elshape = 1
    mesh_ez.curves[5].ndim = 2
    mesh_ez.curves[5].elnumnod = 2
    mesh_ez.curves[5].nnodes = 5
    mesh_ez.curves[5].nelem = 4
    mesh_ez.curves[5].nodes = np.array([
              28,
              27,
              26,
              25,
              12,
    ],dtype=int)
    mesh_ez.curves[5].topology = np.array([
    [
    [           1,          28,],
    [           2,          27,],
    [           3,          26,],
    [           4,          25,],
    ],
    [
    [           2,          27,],
    [           3,          26,],
    [           4,          25,],
    [           5,          12,],
    ],
    ],dtype=int)
    mesh_ez.curves[5].topology = mesh_ez.curves[5].topology - 1 # Python indexing
    mesh_ez.curves[5].nodes = mesh_ez.curves[5].nodes - 1 # Python indexing
    # compensate for zero-based indexing
    mesh_ez.topology = mesh_ez.topology - 1 # Python indexing
    mesh_ez.points = mesh_ez.points - 1 # Python indexing
    self.assertTrue(mesh_py==mesh_ez,'quadrilateral2d failed test!' )
